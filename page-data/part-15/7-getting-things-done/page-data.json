{
    "componentChunkName": "component---src-templates-course-content-template-js",
    "path": "/part-15/7-getting-things-done",
    "result": {"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning objectives"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So far you’ve seen some arithmetic, reversing a string and so on. How does one write actual programs in Haskell? Many of the usual programming constructs like loops, statements and assignment are missing from Haskell. Next, we’ll go through the basic building blocks of Haskell programs:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Conditionals"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Local definitions"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Pattern matching"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursion"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"h3","properties":{"id":"conditionals","style":"position:relative;"},"children":[{"type":"text","value":"Conditionals"},{"type":"element","tagName":"a","properties":{"href":"#conditionals","ariaLabel":"conditionals permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In other languages, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" is a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"statement"}]},{"type":"text","value":". It doesn’t have a value, it just conditionally executes other statements."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Haskell, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" is an "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"expression"}]},{"type":"text","value":". It has a value. It selects between two other expressions. It corresponds to the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"?:"}]},{"type":"text","value":" operator in C or Java."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"java"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-java"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"// Java"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"int"}]},{"type":"text","value":" price "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" product"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"element","tagName":"span","properties":{"className":["token","function"]},"children":[{"type":"text","value":"equals"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"milk\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"?"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":";"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Python a similar if statement could be written like the code below"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"python"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-python"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Python"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" product "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"milk\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    price "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    price "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, one could also simplify the code above using Python’s conditional expressions, which are quite close to haskell’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"python"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-python"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"# Python"}]},{"type":"text","value":"\nprice "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" product "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"milk\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Haskell, if statements are built in a similar way.\nThis is how the same example looks in Haskell:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"price"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"product"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"milk\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because Haskell’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"returns"}]},{"type":"text","value":" a value, you "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"always"}]},{"type":"text","value":" need an "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":"!"}]},{"type":"element","tagName":"h4","properties":{"id":"functions-returning-bool","style":"position:relative;"},"children":[{"type":"text","value":"Functions Returning "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Bool"}]},{"type":"element","tagName":"a","properties":{"href":"#functions-returning-bool","ariaLabel":"functions returning bool permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In order to write if expressions, you need to know how to get values of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":". The most common way is comparisons. The usual "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"<="}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":">="}]},{"type":"text","value":" operators work in Haskell. You can do ordered comparisons ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":") on all sorts of numbers, and equality comparisons ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":") on almost anything:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"foo\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"bar\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5.0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"7.2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One oddity of Haskell is that the not-equals operator is written "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"/="}]},{"type":"text","value":" instead of the usual "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"!="}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"/="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"bike\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"/="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"bike\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remember that in addition to these comparisons, you can get "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":" values out of other "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":" values by using the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"&&"}]},{"type":"text","value":" (“and”) and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"||"}]},{"type":"text","value":" (“or”) operators, and the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" function."}]},{"type":"element","tagName":"h4","properties":{"id":"examples","style":"position:relative;"},"children":[{"type":"text","value":"Examples"},{"type":"element","tagName":"a","properties":{"href":"#examples","ariaLabel":"examples permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"checkPassword"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"swordfish\""}]},{"type":"text","value":"\n                            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"You're in.\""}]},{"type":"text","value":"\n                            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"ACCESS DENIED!\""}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"absoluteValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"user"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"user"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73\""}]},{"type":"text","value":"\n                        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"f4bulous!\""}]},{"type":"text","value":"\n                            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73 logged in\""}]},{"type":"text","value":"\n                            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"wrong password\""}]},{"type":"text","value":"\n                        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unknown user\""}]}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"local-definitions","style":"position:relative;"},"children":[{"type":"text","value":"Local Definitions"},{"type":"element","tagName":"a","properties":{"href":"#local-definitions","ariaLabel":"local definitions permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Haskell has two different ways for creating local definitions: "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"let...in"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" adds local definitions to a definition:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"circleArea"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"circleArea"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rsquare"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3.1415926"}]},{"type":"text","value":"\n              "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rsquare"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"let...in"}]},{"type":"text","value":" is an expression:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"circleArea"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3.1415926"}]},{"type":"text","value":"\n                   "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rsquare"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":"\n               "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rsquare"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Local definitions can also be functions:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"circleArea"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"square"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3.1415926"}]},{"type":"text","value":"\n          "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"square"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"circleArea"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3.1415926"}]},{"type":"text","value":"\n                   "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"square"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":"\n               "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"square"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ll get back to the differences between "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":", but mostly you can use which ever you like."}]},{"type":"element","tagName":"h3","properties":{"id":"a-word-about-immutability","style":"position:relative;"},"children":[{"type":"text","value":"A Word About Immutability"},{"type":"element","tagName":"a","properties":{"href":"#a-word-about-immutability","ariaLabel":"a word about immutability permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Even though things like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"pi"}]},{"type":"text","value":" above are often called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"variables"}]},{"type":"text","value":", I’ve chosen to call them "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"definitions"}]},{"type":"text","value":" here. This is because unlike variables in Python or Java, the values of these definitions can’t be changed. Haskell variables aren’t boxes into which you can put new values, Haskell variables name a value (or rather, an expression) and that’s it."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We’ll talk about immutability again later on this course, but for now it’s enough to know that things like this don’t work."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"increment"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n                "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is just an infinite loop, because it tries to define a new variable "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" with the property "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x = x+1"}]},{"type":"text","value":". Thus when evaluating "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":", Haskell just keeps computing "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"1+1+1+1+..."}]},{"type":"text","value":" indefinitely."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"compute"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"let"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n                "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n            "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"error"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Conflicting"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"definitions"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" ‘"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"’\n    "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bound"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"at"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"14"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"17"}]},{"type":"text","value":"\n                "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"15"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"17"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here we get a straightforward error when we’re trying to “update” the value of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a remark, local definitions can "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"shadow"}]},{"type":"text","value":" the names of variables defined elsewhere. Shadowing is not a side-effect. Instead, shadowing creates a new variable within a more restricted scope that uses the same name as some variable in the outer scope. For example, all of the functions "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" below are legal:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"6"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"where"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If we apply them to the global constant "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":", we see the effects of shadowing:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"6"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"10"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"6"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is best to always choose new names for local variables, so that shadowing never happens. That way, the reader of the code will understand where the variables that are used in an expression come from. Note that in the following example, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" don’t shadow each others’ arguments:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"g"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"pattern-matching","style":"position:relative;"},"children":[{"type":"text","value":"Pattern Matching"},{"type":"element","tagName":"a","properties":{"href":"#pattern-matching","ariaLabel":"pattern matching permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A definition (of a function) can consist of multiple "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"equations"}]},{"type":"text","value":". The equations are matched in order against the arguments until a suitable one is found. This is called "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"pattern matching"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Pattern matching in Haskell is very powerful, and we’ll keep learning new things about it along this course, but here are a couple of first examples:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Finland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hei, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Italy\""}]},{"type":"text","value":"   "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Ciao, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"England\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"How do you do, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"         "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The function "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" generates a greeting given a country and a name (both "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"s). It has special cases for three countries, and a default case. This is how it works:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Finland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Pekka\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hei, Pekka\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"England\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Bob\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"How do you do, Bob\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Italy\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Maria\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Ciao, Maria\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Greenland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Jan\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello, Jan\""}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The special pattern "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" matches anything. It’s usually used for default cases. Because patterns are matched in order, it’s important to ("},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"usually"}]},{"type":"text","value":") put the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" case last. Consider:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"         "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Finland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hei, \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Now the first case gets selected for all inputs."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Finland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Varpu\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello, Varpu\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Sweden\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Ole\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Hello, Ole\""}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"GHC even gives you a warning about this code:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"warning"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Woverlapping"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"patterns"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pattern"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"is"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"redundant"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"In"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"an"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"equation"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" ‘"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":"’"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"brokenGreet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Finland\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"..."}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some more examples follow. But first let’s introduce the standard library function "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"show"}]},{"type":"text","value":" that can turn (almost!) anything into a string:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"show"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"True\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"show"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"3\""}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So, here’s an example of a function with pattern matching and a default case that actually uses the value (instead of just ignoring it with "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"):"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"zero\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"one\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"an even prime\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"the number \""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"++"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"show"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is how it works:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"zero\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"an even prime\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"7"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"the number 7\""}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can even pattern match on multiple arguments. Again, the equations are tried in order. Here’s a reimplementation of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" function from earlier:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"f4bulous!\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73 logged in\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"           "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"wrong password\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"           "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"           "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unknown user\""}]}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"recursion","style":"position:relative;"},"children":[{"type":"text","value":"Recursion"},{"type":"element","tagName":"a","properties":{"href":"#recursion","ariaLabel":"recursion permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Haskell, all sorts of loops are implemented with recursion. Function calls are very efficient, so you don’t need to worry about performance. (We’ll talk about performance later)."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Learning how to do simple things with recursion in Haskell will help you use recursion on more complex problems later. Recursion is also often a useful way for thinking about solving harder problems."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s our first recursive function which computes the factorial. In mathematics, factorial is the product of "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" first positive integers and is written as "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n!"}]},{"type":"text","value":". The definition of factorial is"}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n! = n * (n-1) * … * 1"}]}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"4! = 4*3*2*1 = 24"}]},{"type":"text","value":". Well anyway, here’s the Haskell implementation of factorial:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is how it works. We use "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" to mean “evaluates to”."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"factorial"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"6"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What happens when you evaluate "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"factorial (-1)"}]},{"type":"text","value":"?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s another example:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- compute the sum 1^2+2^2+3^2+...+n^2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"squareSum"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"squareSum"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"^"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"squareSum"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A function can call itself recursively multiple times. As an example let’s consider the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Fibonacci sequence"}]},{"type":"text","value":" from mathematics. The Fibonacci sequence is a sequence of integers with the following definition."}]},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The sequence starts with 1, 1. To get the next element of the sequence, sum the previous two elements of the sequence."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first elements of the Fibonacci sequence are 1, 1, 2, 3, 5, 8, 13 and so on. Here’s a function "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" which computes the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":"th element in the Fibonacci sequence. Note how it mirrors the mathematical definition."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Fibonacci numbers, slow version"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"n"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"-"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s how "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci 5"}]},{"type":"text","value":" evaluates:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"                 "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"text","value":"    "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"       "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":"     "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"      "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note how "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci 3"}]},{"type":"text","value":" gets evaluated twice and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci 2"}]},{"type":"text","value":" three times. This is not the most efficient implementation of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" function. We’ll get back to this in the next lecture. Another way to think about the evaluation of the fibonacci function is to visualize it as a tree (we abbreviate "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fibonacci"}]},{"type":"text","value":" as "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"fib"}]},{"type":"text","value":"):"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/1d986eabc424efb7512476aaf86460be/Fibonacci-step1.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/afcb538edf9062ce4bb19d702470b390/Fibonacci-step2.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/88371dde0f6e9185e62ff7092b4f923a/Fibonacci-step3.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/02c6ef6edf0518b31c86c622037464df/Fibonacci-step4.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/c2095a67141c3c773dc46db36533b131/Fibonacci-step5.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/6a464a00b228c327adba6f3f345f5ce0/Fibonacci-step6.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/df946370292dc47e00d497c3b0b93749/Fibonacci-step7.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/91e5cf340e37d4537664fb21eaddff9f/Fibonacci-step8.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This tree then exaclty corresponds with the expression "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"(1 + 1) + (1 + (1 + 1))"}]},{"type":"text","value":". Recursion can often produce chain-like, tree-like, nested, or loopy structures and computations. Recursion is one of the main techniques in functional programming, so it’s worth spending some effort in learning it."}]},{"type":"element","tagName":"h2","properties":{"id":"exercises","style":"position:relative;"},"children":[{"type":"text","value":"Exercises:"},{"type":"element","tagName":"a","properties":{"href":"#exercises","ariaLabel":"exercises permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All exercises for this chapter can be found in "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set1.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set1"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remember that you can test your functions by using"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"stack"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ghci"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"Set1"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"."}]},{"type":"text","value":"hs"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Then, you can run the test by using"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"bash"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-bash"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"stack runhaskell Set1Test.hs"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You should be able to make the following exercises now:"}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 1.5"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 5: define the function eeny that returns \"eeny\" for even inputs"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- and \"meeny\" for odd inputs."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ps. have a look at the built in function \"even\""}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"eeny"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"eeny"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 1.6"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 6: here's the function checkPassword from the course material."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Modify it so that it accepts two passwords, \"swordfish\" and"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- \"mellon\"."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"checkPassword"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"checkPassword"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"swordfish\""}]},{"type":"text","value":"\n                         "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"You're in.\""}]},{"type":"text","value":"\n                         "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"ACCESS DENIED!\""}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 1.7"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 7: A postal service prices packages the following way."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Packages that weigh up to 500 grams cost 250 credits."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Packages over 500 grams cost 300 credit + 1 credit per gram."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Packages over 5000 grams cost a constant 6000 credits."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Write a function postagePrice that takes the weight of a package"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- in grams, and returns the cost in credits."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"postagePrice"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"postagePrice"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 1.8"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 8: define a function isZero that returns True if it is given an"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Integer that is 0, and False otherwise. Give isZero a type signature."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Use pattern matching! Don't use comparisons!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ps. remember, the type of booleans in haskell is Bool"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"isZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name=\"Learning objectives\"><p>So far you’ve seen some arithmetic, reversing a string and so on. How does one write actual programs in Haskell? Many of the usual programming constructs like loops, statements and assignment are missing from Haskell. Next, we’ll go through the basic building blocks of Haskell programs:</p><ul>\n<li>Conditionals</li>\n<li>Local definitions</li>\n<li>Pattern matching</li>\n<li>Recursion</li>\n</ul></text-box><h3 id=\"conditionals\" style=\"position:relative;\">Conditionals<a href=\"#conditionals\" aria-label=\"conditionals permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>In other languages, <code class=\"language-text\">if</code> is a <em>statement</em>. It doesn’t have a value, it just conditionally executes other statements.</p><p>In Haskell, <code class=\"language-text\">if</code> is an <em>expression</em>. It has a value. It selects between two other expressions. It corresponds to the <code class=\"language-text\">?:</code> operator in C or Java.</p><div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span>\n<span class=\"token keyword\">int</span> price <span class=\"token operator\">=</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"milk\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div><p>In Python a similar if statement could be written like the code below</p><div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python</span>\n<span class=\"token keyword\">if</span> product <span class=\"token operator\">==</span> <span class=\"token string\">\"milk\"</span><span class=\"token punctuation\">:</span>\n    price <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    price <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div><p>However, one could also simplify the code above using Python’s conditional expressions, which are quite close to haskell’s <code class=\"language-text\">if</code>:</p><div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Python</span>\nprice <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> product <span class=\"token operator\">==</span> <span class=\"token string\">\"milk\"</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></code></pre></div><p>In Haskell, if statements are built in a similar way.\nThis is how the same example looks in Haskell:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">price</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">product</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"milk\"</span> <span class=\"token keyword\">then</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span></code></pre></div><p>Because Haskell’s <code class=\"language-text\">if</code> <em>returns</em> a value, you <strong>always</strong> need an <code class=\"language-text\">else</code>!</p><h4 id=\"functions-returning-bool\" style=\"position:relative;\">Functions Returning <code class=\"language-text\">Bool</code><a href=\"#functions-returning-bool\" aria-label=\"functions returning bool permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4><p>In order to write if expressions, you need to know how to get values of type <code class=\"language-text\">Bool</code>. The most common way is comparisons. The usual <code class=\"language-text\">==</code>, <code class=\"language-text\">&lt;</code>, <code class=\"language-text\">&lt;=</code>, <code class=\"language-text\">></code> and <code class=\"language-text\">>=</code> operators work in Haskell. You can do ordered comparisons (<code class=\"language-text\">&lt;</code>, <code class=\"language-text\">></code>) on all sorts of numbers, and equality comparisons (<code class=\"language-text\">==</code>) on almost anything:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token string\">\"foo\"</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"bar\"</span>\n<span class=\"token constant\">False</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token number\">5.0</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">7.2</span>\n<span class=\"token constant\">True</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n<span class=\"token constant\">True</span></code></pre></div><p>One oddity of Haskell is that the not-equals operator is written <code class=\"language-text\">/=</code> instead of the usual <code class=\"language-text\">!=</code>:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token operator\">/=</span> <span class=\"token number\">3</span>\n<span class=\"token constant\">True</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token string\">\"bike\"</span> <span class=\"token operator\">/=</span> <span class=\"token string\">\"bike\"</span>\n<span class=\"token constant\">False</span></code></pre></div><p>Remember that in addition to these comparisons, you can get <code class=\"language-text\">Bool</code> values out of other <code class=\"language-text\">Bool</code> values by using the <code class=\"language-text\">&amp;&amp;</code> (“and”) and <code class=\"language-text\">||</code> (“or”) operators, and the <code class=\"language-text\">not</code> function.</p><h4 id=\"examples\" style=\"position:relative;\">Examples<a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">checkPassword</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"swordfish\"</span>\n                            <span class=\"token keyword\">then</span> <span class=\"token string\">\"You're in.\"</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token string\">\"ACCESS DENIED!\"</span>\n\n<span class=\"token hvariable\">absoluteValue</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token keyword\">then</span> <span class=\"token operator\">-</span><span class=\"token hvariable\">n</span> <span class=\"token keyword\">else</span> <span class=\"token hvariable\">n</span>\n\n<span class=\"token hvariable\">login</span> <span class=\"token hvariable\">user</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">user</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"unicorn73\"</span>\n                        <span class=\"token keyword\">then</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"f4bulous!\"</span>\n                            <span class=\"token keyword\">then</span> <span class=\"token string\">\"unicorn73 logged in\"</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token string\">\"wrong password\"</span>\n                        <span class=\"token keyword\">else</span> <span class=\"token string\">\"unknown user\"</span></code></pre></div><h3 id=\"local-definitions\" style=\"position:relative;\">Local Definitions<a href=\"#local-definitions\" aria-label=\"local definitions permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>Haskell has two different ways for creating local definitions: <code class=\"language-text\">let...in</code> and <code class=\"language-text\">where</code>.</p><p><code class=\"language-text\">where</code> adds local definitions to a definition:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">    <span class=\"token hvariable\">circleArea</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Double</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Double</span>\n    <span class=\"token hvariable\">circleArea</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">rsquare</span>\n        <span class=\"token keyword\">where</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span>\n              <span class=\"token hvariable\">rsquare</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">r</span></code></pre></div><p><code class=\"language-text\">let...in</code> is an expression:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">circleArea</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">let</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span>\n                   <span class=\"token hvariable\">rsquare</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">r</span>\n               <span class=\"token keyword\">in</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">rsquare</span></code></pre></div><p>Local definitions can also be functions:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">circleArea</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">square</span> <span class=\"token hvariable\">r</span>\n    <span class=\"token keyword\">where</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span>\n          <span class=\"token hvariable\">square</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">x</span>\n\n<span class=\"token hvariable\">circleArea</span> <span class=\"token hvariable\">r</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">let</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.1415926</span>\n                   <span class=\"token hvariable\">square</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">x</span>\n               <span class=\"token keyword\">in</span> <span class=\"token builtin\">pi</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">square</span> <span class=\"token hvariable\">r</span></code></pre></div><p>We’ll get back to the differences between <code class=\"language-text\">let</code> and <code class=\"language-text\">where</code>, but mostly you can use which ever you like.</p><h3 id=\"a-word-about-immutability\" style=\"position:relative;\">A Word About Immutability<a href=\"#a-word-about-immutability\" aria-label=\"a word about immutability permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>Even though things like <code class=\"language-text\">pi</code> above are often called <em>variables</em>, I’ve chosen to call them <em>definitions</em> here. This is because unlike variables in Python or Java, the values of these definitions can’t be changed. Haskell variables aren’t boxes into which you can put new values, Haskell variables name a value (or rather, an expression) and that’s it.</p><p>We’ll talk about immutability again later on this course, but for now it’s enough to know that things like this don’t work.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">increment</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n                <span class=\"token keyword\">in</span> <span class=\"token hvariable\">x</span></code></pre></div><p>This is just an infinite loop, because it tries to define a new variable <code class=\"language-text\">x</code> with the property <code class=\"language-text\">x = x+1</code>. Thus when evaluating <code class=\"language-text\">x</code>, Haskell just keeps computing <code class=\"language-text\">1+1+1+1+...</code> indefinitely.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">compute</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">let</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n                <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span><span class=\"token operator\">*</span><span class=\"token number\">2</span>\n            <span class=\"token keyword\">in</span> <span class=\"token hvariable\">a</span>\n\n<span class=\"token builtin\">error</span><span class=\"token operator\">:</span>\n    <span class=\"token constant\">Conflicting</span> <span class=\"token hvariable\">definitions</span> <span class=\"token hvariable\">for</span> ‘<span class=\"token hvariable\">a</span>’\n    <span class=\"token constant\">Bound</span> <span class=\"token hvariable\">at</span><span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">17</span>\n                <span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">15</span><span class=\"token operator\">:</span><span class=\"token number\">17</span></code></pre></div><p>Here we get a straightforward error when we’re trying to “update” the value of <code class=\"language-text\">a</code>.</p><p>As a remark, local definitions can <em>shadow</em> the names of variables defined elsewhere. Shadowing is not a side-effect. Instead, shadowing creates a new variable within a more restricted scope that uses the same name as some variable in the outer scope. For example, all of the functions <code class=\"language-text\">f</code>, <code class=\"language-text\">g</code>, and <code class=\"language-text\">h</code> below are legal:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token hvariable\">f</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">x</span>\n\n<span class=\"token hvariable\">g</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">g</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token keyword\">where</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n\n<span class=\"token hvariable\">h</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">h</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token keyword\">where</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span></code></pre></div><p>If we apply them to the global constant <code class=\"language-text\">x</code>, we see the effects of shadowing:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">f</span> <span class=\"token number\">1</span> <span class=\"token operator\">==></span> <span class=\"token number\">2</span>\n<span class=\"token hvariable\">g</span> <span class=\"token number\">1</span> <span class=\"token operator\">==></span> <span class=\"token number\">6</span>\n<span class=\"token hvariable\">h</span> <span class=\"token number\">1</span> <span class=\"token operator\">==></span> <span class=\"token number\">3</span>\n\n<span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">==></span> <span class=\"token number\">10</span>\n<span class=\"token hvariable\">g</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">==></span> <span class=\"token number\">6</span>\n<span class=\"token hvariable\">h</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">==></span> <span class=\"token number\">3</span></code></pre></div><p>It is best to always choose new names for local variables, so that shadowing never happens. That way, the reader of the code will understand where the variables that are used in an expression come from. Note that in the following example, <code class=\"language-text\">f</code> and <code class=\"language-text\">g</code> don’t shadow each others’ arguments:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">f</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token hvariable\">g</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">g</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span></code></pre></div><h3 id=\"pattern-matching\" style=\"position:relative;\">Pattern Matching<a href=\"#pattern-matching\" aria-label=\"pattern matching permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>A definition (of a function) can consist of multiple <em>equations</em>. The equations are matched in order against the arguments until a suitable one is found. This is called <em>pattern matching</em>.</p><p>Pattern matching in Haskell is very powerful, and we’ll keep learning new things about it along this course, but here are a couple of first examples:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">greet</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">greet</span> <span class=\"token string\">\"Finland\"</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hei, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span>\n<span class=\"token hvariable\">greet</span> <span class=\"token string\">\"Italy\"</span>   <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Ciao, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span>\n<span class=\"token hvariable\">greet</span> <span class=\"token string\">\"England\"</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"How do you do, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span>\n<span class=\"token hvariable\">greet</span> <span class=\"token hvariable\">_</span>         <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span></code></pre></div><p>The function <code class=\"language-text\">greet</code> generates a greeting given a country and a name (both <code class=\"language-text\">String</code>s). It has special cases for three countries, and a default case. This is how it works:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">greet</span> <span class=\"token string\">\"Finland\"</span> <span class=\"token string\">\"Pekka\"</span>\n<span class=\"token string\">\"Hei, Pekka\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">greet</span> <span class=\"token string\">\"England\"</span> <span class=\"token string\">\"Bob\"</span>\n<span class=\"token string\">\"How do you do, Bob\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">greet</span> <span class=\"token string\">\"Italy\"</span> <span class=\"token string\">\"Maria\"</span>\n<span class=\"token string\">\"Ciao, Maria\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">greet</span> <span class=\"token string\">\"Greenland\"</span> <span class=\"token string\">\"Jan\"</span>\n<span class=\"token string\">\"Hello, Jan\"</span></code></pre></div><p>The special pattern <code class=\"language-text\">_</code> matches anything. It’s usually used for default cases. Because patterns are matched in order, it’s important to (<em>usually</em>) put the <code class=\"language-text\">_</code> case last. Consider:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">brokenGreet</span> <span class=\"token hvariable\">_</span>         <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span>\n<span class=\"token hvariable\">brokenGreet</span> <span class=\"token string\">\"Finland\"</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hei, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">name</span></code></pre></div><p>Now the first case gets selected for all inputs.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">brokenGreet</span> <span class=\"token string\">\"Finland\"</span> <span class=\"token string\">\"Varpu\"</span>\n<span class=\"token string\">\"Hello, Varpu\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">brokenGreet</span> <span class=\"token string\">\"Sweden\"</span> <span class=\"token string\">\"Ole\"</span>\n<span class=\"token string\">\"Hello, Ole\"</span></code></pre></div><p>GHC even gives you a warning about this code:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token hvariable\">warning</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token constant\">Woverlapping</span><span class=\"token operator\">-</span><span class=\"token hvariable\">patterns</span><span class=\"token punctuation\">]</span>\n    <span class=\"token constant\">Pattern</span> <span class=\"token hvariable\">match</span> <span class=\"token hvariable\">is</span> <span class=\"token hvariable\">redundant</span>\n    <span class=\"token constant\">In</span> <span class=\"token hvariable\">an</span> <span class=\"token hvariable\">equation</span> <span class=\"token hvariable\">for</span> ‘<span class=\"token hvariable\">brokenGreet</span>’<span class=\"token operator\">:</span> <span class=\"token hvariable\">brokenGreet</span> <span class=\"token string\">\"Finland\"</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div><p>Some more examples follow. But first let’s introduce the standard library function <code class=\"language-text\">show</code> that can turn (almost!) anything into a string:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token builtin\">show</span> <span class=\"token constant\">True</span>\n<span class=\"token string\">\"True\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token builtin\">show</span> <span class=\"token number\">3</span>\n<span class=\"token string\">\"3\"</span></code></pre></div><p>So, here’s an example of a function with pattern matching and a default case that actually uses the value (instead of just ignoring it with <code class=\"language-text\">_</code>):</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">describe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Integer</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">describe</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"zero\"</span>\n<span class=\"token hvariable\">describe</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span>\n<span class=\"token hvariable\">describe</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"an even prime\"</span>\n<span class=\"token hvariable\">describe</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"the number \"</span> <span class=\"token operator\">++</span> <span class=\"token builtin\">show</span> <span class=\"token hvariable\">n</span></code></pre></div><p>This is how it works:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">describe</span> <span class=\"token number\">0</span>\n<span class=\"token string\">\"zero\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">describe</span> <span class=\"token number\">2</span>\n<span class=\"token string\">\"an even prime\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">describe</span> <span class=\"token number\">7</span>\n<span class=\"token string\">\"the number 7\"</span></code></pre></div><p>You can even pattern match on multiple arguments. Again, the equations are tried in order. Here’s a reimplementation of the <code class=\"language-text\">login</code> function from earlier:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">login</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">login</span> <span class=\"token string\">\"unicorn73\"</span> <span class=\"token string\">\"f4bulous!\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"unicorn73 logged in\"</span>\n<span class=\"token hvariable\">login</span> <span class=\"token string\">\"unicorn73\"</span> <span class=\"token hvariable\">_</span>           <span class=\"token operator\">=</span> <span class=\"token string\">\"wrong password\"</span>\n<span class=\"token hvariable\">login</span> <span class=\"token hvariable\">_</span>           <span class=\"token hvariable\">_</span>           <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown user\"</span></code></pre></div><h3 id=\"recursion\" style=\"position:relative;\">Recursion<a href=\"#recursion\" aria-label=\"recursion permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>In Haskell, all sorts of loops are implemented with recursion. Function calls are very efficient, so you don’t need to worry about performance. (We’ll talk about performance later).</p><p>Learning how to do simple things with recursion in Haskell will help you use recursion on more complex problems later. Recursion is also often a useful way for thinking about solving harder problems.</p><p>Here’s our first recursive function which computes the factorial. In mathematics, factorial is the product of <em>n</em> first positive integers and is written as <em>n!</em>. The definition of factorial is</p><blockquote>\n<p><em>n! = n * (n-1) * … * 1</em></p>\n</blockquote><p>For example, <em>4! = 4*3*2*1 = 24</em>. Well anyway, here’s the Haskell implementation of factorial:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">factorial</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">factorial</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">factorial</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div><p>This is how it works. We use <code class=\"language-text\">==></code> to mean “evaluates to”.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">factorial</span> <span class=\"token number\">3</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span> <span class=\"token number\">2</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token hvariable\">factorial</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">6</span></code></pre></div><p>What happens when you evaluate <code class=\"language-text\">factorial (-1)</code>?</p><p>Here’s another example:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- compute the sum 1^2+2^2+3^2+...+n^2</span>\n<span class=\"token hvariable\">squareSum</span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">squareSum</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">n</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">squareSum</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div><p>A function can call itself recursively multiple times. As an example let’s consider the <em>Fibonacci sequence</em> from mathematics. The Fibonacci sequence is a sequence of integers with the following definition.</p><blockquote>\n<p>The sequence starts with 1, 1. To get the next element of the sequence, sum the previous two elements of the sequence.</p>\n</blockquote><p>The first elements of the Fibonacci sequence are 1, 1, 2, 3, 5, 8, 13 and so on. Here’s a function <code class=\"language-text\">fibonacci</code> which computes the <code class=\"language-text\">n</code>th element in the Fibonacci sequence. Note how it mirrors the mathematical definition.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Fibonacci numbers, slow version</span>\n<span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">fibonacci</span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div><p>Here’s how <code class=\"language-text\">fibonacci 5</code> evaluates:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">5</span>\n    <span class=\"token operator\">==></span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">3</span>                 <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">==></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">==></span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span>       <span class=\"token number\">1</span>    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">4</span>\n    <span class=\"token operator\">==></span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span>       <span class=\"token number\">1</span>    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span>       <span class=\"token number\">1</span>    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">fibonacci</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span>       <span class=\"token number\">1</span>    <span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>    <span class=\"token number\">1</span>       <span class=\"token operator\">+</span>     <span class=\"token number\">1</span>      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">5</span></code></pre></div><p>Note how <code class=\"language-text\">fibonacci 3</code> gets evaluated twice and <code class=\"language-text\">fibonacci 2</code> three times. This is not the most efficient implementation of the <code class=\"language-text\">fibonacci</code> function. We’ll get back to this in the next lecture. Another way to think about the evaluation of the fibonacci function is to visualize it as a tree (we abbreviate <code class=\"language-text\">fibonacci</code> as <code class=\"language-text\">fib</code>):</p><p><img src=\"/COPL-oop-25/1d986eabc424efb7512476aaf86460be/Fibonacci-step1.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/afcb538edf9062ce4bb19d702470b390/Fibonacci-step2.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/88371dde0f6e9185e62ff7092b4f923a/Fibonacci-step3.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/02c6ef6edf0518b31c86c622037464df/Fibonacci-step4.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/c2095a67141c3c773dc46db36533b131/Fibonacci-step5.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/6a464a00b228c327adba6f3f345f5ce0/Fibonacci-step6.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/df946370292dc47e00d497c3b0b93749/Fibonacci-step7.svg\" alt=\"\"></p><p><img src=\"/COPL-oop-25/91e5cf340e37d4537664fb21eaddff9f/Fibonacci-step8.svg\" alt=\"\"></p><p>This tree then exaclty corresponds with the expression <code class=\"language-text\">(1 + 1) + (1 + (1 + 1))</code>. Recursion can often produce chain-like, tree-like, nested, or loopy structures and computations. Recursion is one of the main techniques in functional programming, so it’s worth spending some effort in learning it.</p><h2 id=\"exercises\" style=\"position:relative;\">Exercises:<a href=\"#exercises\" aria-label=\"exercises permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>All exercises for this chapter can be found in <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set1.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set1</a>.</p><p>Remember that you can test your functions by using</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">stack</span> <span class=\"token hvariable\">ghci</span> <span class=\"token hvariable\">Set1<span class=\"token punctuation\">.</span>hs</span></code></pre></div><p>Then, you can run the test by using</p><div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">stack runhaskell Set1Test.hs</code></pre></div><p>You should be able to make the following exercises now:</p><text-box variant='exercise' name=\"Exercise 1.5\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 5: define the function eeny that returns \"eeny\" for even inputs</span>\n<span class=\"token comment\">-- and \"meeny\" for odd inputs.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Ps. have a look at the built in function \"even\"</span>\n\n<span class=\"token hvariable\">eeny</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Integer</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">eeny</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box>\n<text-box variant='exercise' name=\"Exercise 1.6\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 6: here's the function checkPassword from the course material.</span>\n<span class=\"token comment\">-- Modify it so that it accepts two passwords, \"swordfish\" and</span>\n<span class=\"token comment\">-- \"mellon\".</span>\n\n<span class=\"token hvariable\">checkPassword</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">checkPassword</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token hvariable\">password</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"swordfish\"</span>\n                         <span class=\"token keyword\">then</span> <span class=\"token string\">\"You're in.\"</span>\n                         <span class=\"token keyword\">else</span> <span class=\"token string\">\"ACCESS DENIED!\"</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 1.7\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 7: A postal service prices packages the following way.</span>\n<span class=\"token comment\">-- Packages that weigh up to 500 grams cost 250 credits.</span>\n<span class=\"token comment\">-- Packages over 500 grams cost 300 credit + 1 credit per gram.</span>\n<span class=\"token comment\">-- Packages over 5000 grams cost a constant 6000 credits.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Write a function postagePrice that takes the weight of a package</span>\n<span class=\"token comment\">-- in grams, and returns the cost in credits.</span>\n\n<span class=\"token hvariable\">postagePrice</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">postagePrice</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 1.8\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 8: define a function isZero that returns True if it is given an</span>\n<span class=\"token comment\">-- Integer that is 0, and False otherwise. Give isZero a type signature.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Use pattern matching! Don't use comparisons!</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Ps. remember, the type of booleans in haskell is Bool</span>\n\n<span class=\"token hvariable\">isZero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box></div>","frontmatter":{"path":"/part-15/7-getting-things-done","title":"How Do I Get Anything Done?"},"fileAbsolutePath":"/home/runner/work/COPL-oop-25/COPL-oop-25/data/part-15/7.md"},"allPages":{"edges":[{"node":{"id":"70db426a-57dc-59f3-be21-475d2cf02f95","frontmatter":{"path":"/all-exercises","title":"All exercises"}}},{"node":{"id":"0ff36324-cef6-5dd9-8bc9-7d1a4cdfa653","frontmatter":{"path":"/error_messages","title":"Common Python error messages"}}},{"node":{"id":"a364b6da-5181-5f8d-b6ca-88f0a492b162","frontmatter":{"path":"/exam","title":"Exam 4.6."}}},{"node":{"id":"76ca1364-2558-5dd3-9076-b9f2daff80e1","frontmatter":{"path":"/exam-adv","title":"Advanced Course in Programming exam 24.02."}}},{"node":{"id":"9d286f0c-3dc4-576e-b256-647729faba53","frontmatter":{"path":"/exam-intro","title":"Introduction to Programming exam 13.01."}}},{"node":{"id":"b59f028e-d6b0-5e1c-96bd-45f04036805e","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"f315e566-70ae-5ed8-b4a7-21375dfed100","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"f03b8a6c-e45d-5374-a650-098e7ef62219","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"10057648-387a-54a2-afe0-d7e150eabf3b","frontmatter":{"path":"/error_haskell_messages","title":"Common Haskell error messages"}}},{"node":{"id":"212221a5-8a78-5136-ba59-a96d46b762d0","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"791bc9c7-c446-523e-949b-20e9ff37f966","frontmatter":{"path":"/glossary","title":"Glossary"}}},{"node":{"id":"2cdc5b02-5657-5cb6-bc4d-f5f14fb5ea81","frontmatter":{"path":"/support-and-assistance","title":"Support and assistance"}}},{"node":{"id":"738298bc-1412-55ff-b427-0836a4f25860","frontmatter":{"path":"/part-10/3-oo-programming-techniques","title":"Object oriented programming techniques"}}},{"node":{"id":"b0423f17-6d06-50a6-b986-e8ee96be5929","frontmatter":{"path":"/part-10/4-application-development","title":"Developing a larger application"}}},{"node":{"id":"022a71da-dc0b-55cb-aeb2-ae1c881fddf0","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"8695865d-affb-57ed-9994-7bde990ed173","frontmatter":{"path":"/part-10/2-access-modifiers","title":"Access modifiers"}}},{"node":{"id":"a21d013a-378d-59b0-a1f6-0f9ef7c26205","frontmatter":{"path":"/part-11/1-list-comprehensions","title":"List comprehensions"}}},{"node":{"id":"3982b053-9e05-569a-992e-796f6b50cadf","frontmatter":{"path":"/part-10/1-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"3a67469a-a235-5dfb-9f74-be9c104a1c17","frontmatter":{"path":"/part-11/2-more-comprehensions","title":"More comprehensions"}}},{"node":{"id":"860b9e5e-9675-59a0-9bc8-2596f6cbe6f8","frontmatter":{"path":"/part-11/4-more-recursion-examples","title":"More recursion examples"}}},{"node":{"id":"edc5eb53-ca3e-584a-96e6-354dee642d66","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"cc2ae34a-275b-5de5-a9ab-8381641e85a4","frontmatter":{"path":"/part-12/1-functions-as-arguments","title":"Functions as arguments"}}},{"node":{"id":"33c7a0c6-129e-5252-a6f9-a8fcee13c484","frontmatter":{"path":"/part-12/2-generators","title":"Generators"}}},{"node":{"id":"449c1384-ffb9-5f49-86f9-2eea78b203d4","frontmatter":{"path":"/part-12/3-functional-programming","title":"Functional programming"}}},{"node":{"id":"73ccfff1-6985-57bc-b08f-2cedce055fb9","frontmatter":{"path":"/part-12/4-regular-expressions","title":"Regular expressions"}}},{"node":{"id":"e232b871-c727-5d49-b360-852b3e5987e9","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"6912be65-e19f-5a8e-b5c5-701bfd90e28c","frontmatter":{"path":"/part-13/1-pygame","title":"Pygame"}}},{"node":{"id":"4cfc6877-59d4-56b5-9b3d-d673d8b01f01","frontmatter":{"path":"/part-13/2-animation","title":"Animation"}}},{"node":{"id":"e4994455-e1d5-5dbe-8ca1-0a1dce98c5d7","frontmatter":{"path":"/part-13/4-more-pygame-techniques","title":"More pygame techniques"}}},{"node":{"id":"2cb47b32-2e90-59ad-b688-78f714ba84d2","frontmatter":{"path":"/part-11/3-recursion","title":"Recursion"}}},{"node":{"id":"97f38cd2-063c-5350-81f0-8d675e6ac151","frontmatter":{"path":"/part-13/3-events","title":"Events"}}},{"node":{"id":"7cb083a3-43ea-584c-ae50-cd411df43d30","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"2feac3ab-fbb2-55aa-a50b-4a16ea4864b7","frontmatter":{"path":"/part-14/1-game-project","title":"Game project"}}},{"node":{"id":"a653435c-496f-52e9-be6b-9003b5fa477f","frontmatter":{"path":"/part-14/2-robot-and-boxes","title":"Robot and boxes"}}},{"node":{"id":"5012c39f-db76-5cd1-9047-dfde06d29aa9","frontmatter":{"path":"/part-14/3-finishing-the-game","title":"Finishing the game"}}},{"node":{"id":"1376d519-cc29-5db1-b33d-fe70f4ce8483","frontmatter":{"path":"/part-14/4-your-own-game","title":"Your own game"}}},{"node":{"id":"ab918593-3fda-589d-acc2-258f3c133352","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"36c7eeab-221c-5e64-9be8-4c83589784c1","frontmatter":{"path":"/part-15/1-objects-and-methods","title":"Intro Haskell"}}},{"node":{"id":"4534bd15-62bb-5e29-9277-c4093b3d47ad","frontmatter":{"path":"/part-15/2-haskell","title":"So what is Haskell?"}}},{"node":{"id":"9fbe1e6c-b40c-59a3-925e-e2b4172f20b6","frontmatter":{"path":"/part-15/3-letsstart","title":"Let’s Start"}}},{"node":{"id":"6aaec35c-ac81-5222-bedf-23f7675bb971","frontmatter":{"path":"/part-15/4-expressions-and-types","title":"Expressions and Types"}}},{"node":{"id":"f2efd7ef-56f7-5ecc-85d6-9aa3d6721ae0","frontmatter":{"path":"/part-15/5-structure-of-haskell","title":"The Structure of a Haskell Program"}}},{"node":{"id":"cbbb276e-5024-5cc0-bcb1-8efdcf27dcdd","frontmatter":{"path":"/part-15/7-getting-things-done","title":"How Do I Get Anything Done?"}}},{"node":{"id":"9383f945-4456-51c5-aec9-34e99e0612fd","frontmatter":{"path":"/part-15/6-working-with-examples","title":"Working with examples"}}},{"node":{"id":"9658bac3-2c3a-5210-878b-800934662fed","frontmatter":{"path":"/part-15/8s-all-together","title":"All Together Now!"}}},{"node":{"id":"8e95242d-046a-5fc5-a279-8b994675111b","frontmatter":{"path":"/part-15","title":"Part 15"}}},{"node":{"id":"c7409da1-6711-50c3-b1a8-618c60271ae3","frontmatter":{"path":"/part-16/1-recursion-helper-functions","title":"Recursion Helper Functions and Guards"}}},{"node":{"id":"971ef0bf-246c-5e0a-8b11-158995ea1348","frontmatter":{"path":"/part-16/2-lists","title":"Lists"}}},{"node":{"id":"806fa8b9-de69-5b17-ad78-2304f33b751e","frontmatter":{"path":"/part-16/3-immutability-inference-polymorphism","title":"Some notes on Immutability, Type Inference and Polymorphism"}}},{"node":{"id":"231fde5b-3a9f-5a78-838a-9ff3da62f2bb","frontmatter":{"path":"/part-16/4-the-maybe-type","title":"The Maybe type"}}},{"node":{"id":"ee12b151-bbfd-5303-97ce-fae854429639","frontmatter":{"path":"/part-16/5-the-either-type","title":"The Either type"}}},{"node":{"id":"55c41937-9e28-50c1-808e-fcc3fa43a221","frontmatter":{"path":"/part-16/6-the-case-of-expression","title":"The case-of Expression"}}},{"node":{"id":"888943e8-39c6-58d4-b223-c98b8d5f4bed","frontmatter":{"path":"/part-16/7-recap","title":"Recap and Quiz"}}},{"node":{"id":"67d9a2e7-2255-5de4-8ff8-4f89cf3c3e4b","frontmatter":{"path":"/part-16","title":"Part 16"}}},{"node":{"id":"1af85660-9bc5-533a-abd4-4fafc217fa2a","frontmatter":{"path":"/part-17/1-functional-programming","title":"Functional Programming, at Last"}}},{"node":{"id":"1b38f7cc-7add-5cd7-b536-63294bd8082e","frontmatter":{"path":"/part-17/2-partial-prefix-infix","title":"Partial Application, Prefix and Infix"}}},{"node":{"id":"1c737b87-526a-5911-b33d-f5eed3685c79","frontmatter":{"path":"/part-17/3-lambdas","title":"Lambdas"}}},{"node":{"id":"2f4d4f8b-88e2-5f6f-a3d1-0953546035f9","frontmatter":{"path":"/part-17/4-more-operators","title":"The . and $ operators, List wranging (takewhile, etc)"}}},{"node":{"id":"25a975c9-ac1b-50ad-a932-d0471c204a44","frontmatter":{"path":"/part-17/5-lists-and-recursion","title":"Lists and Recursion"}}},{"node":{"id":"ef89dc84-be20-5512-8418-095b872581cf","frontmatter":{"path":"/part-17/6-something-fun","title":"List Comprehensions, Custom Operators, Typed Holes"}}},{"node":{"id":"989f79cf-e3a5-5458-bce5-8b0c8ed61354","frontmatter":{"path":"/part-17/7-quiz","title":"Wrapping up + quiz"}}},{"node":{"id":"8c277ecb-948b-52cf-a12f-f118976b45a7","frontmatter":{"path":"/part-17","title":"Part 17"}}},{"node":{"id":"3a41f183-354f-5d08-b4d0-1850b2c6e0aa","frontmatter":{"path":"/part-18/1-tuples","title":"Tuples"}}},{"node":{"id":"f923abd0-c92f-533e-a372-be06ed8af825","frontmatter":{"path":"/part-18/2-folding","title":"Folding"}}},{"node":{"id":"90746aeb-e10c-5267-804b-7dbdc30fbcf1","frontmatter":{"path":"/part-18/3-type-classes","title":"Type Classes and Constraints"}}},{"node":{"id":"dcd79ec6-5424-53ab-92e0-80423138ec4e","frontmatter":{"path":"/part-18/4-type-classes","title":"Standard Type Classes"}}},{"node":{"id":"7533b38a-02f6-50e5-b930-6c4b94e5d864","frontmatter":{"path":"/part-18/5-data-maps","title":"Data Maps"}}},{"node":{"id":"bced3c35-04a7-56ba-939c-6ecc6b4c5336","frontmatter":{"path":"/part-18/6-data-arrays","title":"Data Arrays"}}},{"node":{"id":"b22d2862-78d9-56d8-83e4-7d3be7c20c51","frontmatter":{"path":"/part-18/7-reading-docs","title":"Reading Docs"}}},{"node":{"id":"b11f698a-e49a-5911-b037-9910b5ccd078","frontmatter":{"path":"/part-18/8-quiz","title":"Quiz"}}},{"node":{"id":"0aa2bf0c-e8e8-5038-bb01-c9defbed65ad","frontmatter":{"path":"/part-18","title":"Part 18"}}},{"node":{"id":"8209d3f3-3607-5fa9-a270-065f72867c2f","frontmatter":{"path":"/part-19/1-algebraic-datatypes","title":"Algebraic Datatypes"}}},{"node":{"id":"ed319291-57f9-5f87-abf2-366c4b8624dd","frontmatter":{"path":"/part-15/9-wrapping-up","title":"Wrapping up: Indentation & Quiz"}}},{"node":{"id":"07d9a1cd-d5e7-502f-badc-3ec47695e4f5","frontmatter":{"path":"/part-19/2-type-parameters","title":"Type Parameters"}}},{"node":{"id":"f058d32f-70fb-5e45-b33f-92c8b9925203","frontmatter":{"path":"/part-19/3-recursive-types","title":"Recursive Types"}}},{"node":{"id":"37b614c2-ba14-5c92-8d1f-f4f579f59a4a","frontmatter":{"path":"/part-19/4-record-syntax","title":"Record Syntax"}}},{"node":{"id":"773e8396-9ae3-5c75-9881-9d4a626a4528","frontmatter":{"path":"/part-19/5-summary","title":"Summary of Algebraic Datatypes"}}},{"node":{"id":"e90289c1-8e47-5749-9f41-2315b193ca54","frontmatter":{"path":"/part-19/6-how","title":"How do Algebraic Datatypes Work?"}}},{"node":{"id":"67375c22-2685-5e2a-9ec9-8a04958a8239","frontmatter":{"path":"/part-19/7-quiz","title":"Quiz"}}},{"node":{"id":"fc96aa55-9df9-5b92-b68f-f306732b5dbe","frontmatter":{"path":"/part-19","title":"Part 19"}}},{"node":{"id":"04351fcb-c53a-57d3-8fd3-3145854114a3","frontmatter":{"path":"/part-8/1-objects-and-methods","title":"Objects and methods"}}},{"node":{"id":"efe1c1c6-69db-5355-bd7d-35b01bc6de13","frontmatter":{"path":"/part-8/2-classes-and-objects","title":"Classes and objects"}}},{"node":{"id":"b7d1721d-9c3f-55bc-8e1f-336ba9a3781a","frontmatter":{"path":"/part-8/3-defining-classes","title":"Defining classes"}}},{"node":{"id":"11dec441-ecf7-5a8e-a0eb-8b9cae46b80a","frontmatter":{"path":"/part-8/4-defining-methods","title":"Defining methods"}}},{"node":{"id":"50518a59-9120-5a26-b46b-84903dc1f8c7","frontmatter":{"path":"/part-8/5-more-examples-of-classes","title":"More examples of classes"}}},{"node":{"id":"182487cc-f79f-5454-bccb-fdb7051209ef","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"d1d16ea0-e607-5d88-9485-acbf463bb81c","frontmatter":{"path":"/part-9/1-objects-and-references","title":"Objects and references"}}},{"node":{"id":"07168394-9f19-5d64-addc-c1af579a656d","frontmatter":{"path":"/part-9/2-objects-as-attributes","title":"Objects as attributes"}}},{"node":{"id":"9fe368ff-008c-533f-9c5a-ca8af65d3c7d","frontmatter":{"path":"/part-9/3-encapsulation","title":"Encapsulation"}}},{"node":{"id":"8b3547b9-42f6-52fb-95f0-af81fdd2b422","frontmatter":{"path":"/part-9/4-scope-of-methods","title":"Scope of methods"}}},{"node":{"id":"d839c260-d9fe-59f2-bbae-ab5b84733e8d","frontmatter":{"path":"/part-9/5-class-attributes","title":"Class attributes"}}},{"node":{"id":"2f8cfcd1-55ca-54fb-9c46-f137fb6e918f","frontmatter":{"path":"/part-9/6-more-examples-with-classes","title":"More examples with classes"}}},{"node":{"id":"c60da7d6-42f6-5838-b760-1a897b2b2cc1","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"3dbd990a-41f7-56cb-94f8-b4e75b2965ef","frontmatter":{"path":"/setup/1-vscode","title":"The Visual Studio Code editor, Python interpreter and built-in debugging tool"}}},{"node":{"id":"298bb9e9-8780-597a-bb4e-f523b9f8c952","frontmatter":{"path":"/setup","title":"Setup (VS code)"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["1357757885","994120085"]}