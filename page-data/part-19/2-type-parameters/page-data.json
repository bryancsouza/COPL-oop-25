{
    "componentChunkName": "component---src-templates-course-content-template-js",
    "path": "/part-19/2-type-parameters",
    "result": {"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning objectives"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After this section"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to define parameterized types"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We introduced type parameters and parametric polymorphism when introducing lists in Lecture 2. Since then, we’ve seen other parameterized types like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Either"}]},{"type":"text","value":". Now we’ll learn how we can define our own parameterized types."}]},{"type":"element","tagName":"h3","properties":{"id":"defining-parameterized-types","style":"position:relative;"},"children":[{"type":"text","value":"Defining Parameterized Types"},{"type":"element","tagName":"a","properties":{"href":"#defining-parameterized-types","ariaLabel":"defining parameterized types permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The definition for "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" is:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"? We define a parameterized type by mentioning a "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"type variable"}]},{"type":"text","value":" ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" in this case) on the left side of the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" sign. We can then use the same type variable in fields for our constructors. This is analogous to polymorphic functions. Instead of defining separate functions"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headInt"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headBool"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"and so on, we define one function "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"head :: [a] -> a"}]},{"type":"text","value":" that works for all types "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":". Similarly, instead of defining multiple types"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"MaybeInt"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"NothingInt"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"JustInt"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"MaybeBool"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"NothingBool"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"JustBool"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"we define one type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe a"}]},{"type":"text","value":" that works for all types "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here’s our first own parameterized type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":". The values of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Described a"}]},{"type":"text","value":" contain a value of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" description."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getDescription"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getDescription"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"desc"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"desc"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"This is true\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"This is true\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Described"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getValue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a number\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getDescription"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Describe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a number\""}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a number\""}]}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"syntactic-note","style":"position:relative;"},"children":[{"type":"text","value":"Syntactic Note"},{"type":"element","tagName":"a","properties":{"href":"#syntactic-note","ariaLabel":"syntactic note permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above definitions, we’ve used "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" as a type variable. However any word that starts with a lower case letter is fine. We could have defined "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"theType"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"theType"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The rules for Haskell identifiers are:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Type variables and names for functions and values start lower case (e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"map"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"xs"}]},{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Type names and constructor names start with upper case (e.g. "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Card"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Heart"}]},{"type":"text","value":")"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that a type and its constructor can have the same name. This is very common in Haskell code for types that only have one constructor. In this material we try to avoid it to avoid confusion. Here are some examples:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pair"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pair"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Report"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Report"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pair"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pair"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Pair"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Beware of mixing up types and constructors. Luckily types and constructors can never occur in the same context, so you get a nice error:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":"                              "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- trying to use a type name as a value"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"error"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    • "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"constructor"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"not"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"scope"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"undefined"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":"               "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- trying to use a constructor as a type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"14"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"error"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Not"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"in"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"scope"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"type"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"constructor"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"or"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"class"}]},{"type":"text","value":" ‘"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":"’"}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"sidenote-multiple-type-parameters","style":"position:relative;"},"children":[{"type":"text","value":"Sidenote: Multiple Type Parameters"},{"type":"element","tagName":"a","properties":{"href":"#sidenote-multiple-type-parameters","ariaLabel":"sidenote multiple type parameters permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Types can have multiple type parameters. The syntax is similar to defining functions with many arguments. Here’s the definition of the standard "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Either"}]},{"type":"text","value":" type:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Either"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"b"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Left"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Right"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"b"}]}]}]}]},{"type":"element","tagName":"h2","properties":{"id":"exercises","style":"position:relative;"},"children":[{"type":"text","value":"Exercises"},{"type":"element","tagName":"a","properties":{"href":"#exercises","ariaLabel":"exercises permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All exercises can be found in "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5a.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set5a"}]},{"type":"text","value":"\nand "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5b.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set5b"}]},{"type":"text","value":". Please pay attention in the title of the exercise in which file the exercises of this section can be found."}]},{"type":"element","tagName":"h2","properties":{"id":"exercises-from-5a","style":"position:relative;"},"children":[{"type":"text","value":"Exercises from 5a:"},{"type":"element","tagName":"a","properties":{"href":"#exercises-from-5a","ariaLabel":"exercises from 5a permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.3"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 3: Here's the definition for a datatype ShoppingEntry that"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- represents an entry in a shopping basket. It has an item name (a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- String), an item price (a Double) and a count (an Int). You'll also"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- find two examples of ShoppingEntry values."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Implement the functions totalPrice and buyOneMore below."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"MkShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"threeApples"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"threeApples"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"MkShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Apple\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0.5"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"twoBananas"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"twoBananas"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"MkShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"Banana\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1.1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- totalPrice should return the total price for an entry"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Hint: you'll probably need fromIntegral to convert the Int into a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Double"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   totalPrice threeApples  ==> 1.5"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   totalPrice twoBananas   ==> 2.2"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"totalPrice"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Double"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"totalPrice"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- buyOneMore should increment the count in an entry by one"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Example:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   buyOneMore twoBananas    ==> MkShoppingEntry \"Banana\" 1.1 3"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"buyOneMore"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"ShoppingEntry"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"buyOneMore"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.4"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 4: define a datatype Person, which should contain the age (an"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Int) and the name (a String) of a person."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Also define a Person value fred, and the functions getAge, getName,"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- setAge and setName (see below)."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"PersonUndefined"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- fred is a person whose name is Fred and age is 90"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fred"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"fred"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- getName returns the name of the person"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getName"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getName"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"p"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- getAge returns the age of the person"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getAge"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getAge"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"p"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- setName takes a person and returns a new person with the name changed"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"setName"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"setName"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"name"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"p"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- setAge does likewise for age"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"setAge"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Person"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"setAge"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"age"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"p"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.5"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 5: define a datatype Position which contains two Int values, x"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- and y. Also define the functions below for operating on a Position."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   getY (up (up origin))    ==> 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   getX (up (right origin)) ==> 1"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"PositionUndefined"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- origin is a Position value with x and y set to 0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"origin"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"origin"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- getX returns the x of a Position"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getX"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getX"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- getY returns the y of a position"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getY"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"getY"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- up increases the y value of a position by one"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"up"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"up"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- right increases the x value of a position by one"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"right"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Position"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"right"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.6"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 6: Here's a datatype that represents a student. A student can"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- either be a freshman, a nth year student, or graduated."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Freshman"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"NthYear"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Graduated"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Eq"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Implement the function study, which changes a Freshman into a 1st"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- year student, a 1st year student into a 2nd year student, and so"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- on. A 7th year student gets changed to a graduated student. A"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- graduated student stays graduated even if he studies."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"study"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Student"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"study"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.7"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 7: define a datatype UpDown that represents a counter that can"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- either be in increasing or decreasing mode. Also implement the"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- functions zero, toggle, tick and get below."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- NB! Define _two_ constructors for your datatype (feel free to name the"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- constructors however you want)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- get (tick zero)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   ==> 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- get (tick (tick zero))"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   ==> 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- get (tick (tick (toggle (tick zero))))"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   ==> -1"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDownUndefined1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDownUndefined2"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- zero is an increasing counter with value 0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"zero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"zero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- get returns the counter value"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"get"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"get"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ud"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- tick increases an increasing counter by one or decreases a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- decreasing counter by one"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"tick"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"tick"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ud"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- toggle changes an increasing counter into a decreasing counter and"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- vice versa"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"toggle"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"UpDown"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"toggle"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ud"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.8"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 8: you'll find a Color datatype below. It has the three basic"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- colours Red, Green and Blue, and two color transformations, Mix and"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Invert."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Mix means the average of the two colors in each rgb channel."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Invert means subtracting all rgb values from 1."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Implement the function rgb :: Color -> [Double] that returns a list"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- of length three that represents the rgb value of the given color."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb Red   ==> [1,0,0]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb Green ==> [0,1,0]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb Blue  ==> [0,0,1]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb (Mix Red Green)                    ==> [0.5,0.5,0]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb (Mix Red (Mix Red Green))          ==> [0.75,0.25,0]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb (Invert Red)                       ==> [0,1,1]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb (Invert (Mix Red (Mix Red Green))) ==> [0.25,0.75,1]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- rgb (Mix (Invert Red) (Invert Green))  ==> [0.5,0.5,1]"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Red"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Green"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Blue"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Mix"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Invert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rgb"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Color"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Double"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"rgb"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"col"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5a.9"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 9: define a parameterized datatype OneOrTwo that contains one or"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- two values of the given type. The constructors should be called One and Two."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   One True         ::  OneOrTwo Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   Two \"cat\" \"dog\"  ::  OneOrTwo String"}]}]}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name=\"Learning objectives\"><p>After this section</p><ul>\n<li>You know how to define parameterized types</li>\n</ul></text-box><p>We introduced type parameters and parametric polymorphism when introducing lists in Lecture 2. Since then, we’ve seen other parameterized types like <code class=\"language-text\">Maybe</code> and <code class=\"language-text\">Either</code>. Now we’ll learn how we can define our own parameterized types.</p><h3 id=\"defining-parameterized-types\" style=\"position:relative;\">Defining Parameterized Types<a href=\"#defining-parameterized-types\" aria-label=\"defining parameterized types permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>The definition for <code class=\"language-text\">Maybe</code> is:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span></code></pre></div><p>What’s <code class=\"language-text\">a</code>? We define a parameterized type by mentioning a <em>type variable</em> (<code class=\"language-text\">a</code> in this case) on the left side of the <code class=\"language-text\">=</code> sign. We can then use the same type variable in fields for our constructors. This is analogous to polymorphic functions. Instead of defining separate functions</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">headInt</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">headBool</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Bool</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span></code></pre></div><p>and so on, we define one function <code class=\"language-text\">head :: [a] -> a</code> that works for all types <code class=\"language-text\">a</code>. Similarly, instead of defining multiple types</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">MaybeInt</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NothingInt</span> <span class=\"token operator\">|</span> <span class=\"token constant\">JustInt</span> <span class=\"token constant\">Int</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">MaybeBool</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NothingBool</span> <span class=\"token operator\">|</span> <span class=\"token constant\">JustBool</span> <span class=\"token constant\">Bool</span></code></pre></div><p>we define one type <code class=\"language-text\">Maybe a</code> that works for all types <code class=\"language-text\">a</code>.</p><p>Here’s our first own parameterized type <code class=\"language-text\">Described</code>. The values of type <code class=\"language-text\">Described a</code> contain a value of type <code class=\"language-text\">a</code> and a <code class=\"language-text\">String</code> description.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Described</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Describe</span> <span class=\"token hvariable\">a</span> <span class=\"token constant\">String</span>\n\n<span class=\"token hvariable\">getValue</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Described</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">getValue</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Describe</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span>\n\n<span class=\"token hvariable\">getDescription</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Described</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">getDescription</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Describe</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">desc</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">desc</span>\n\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Describe</span>\n<span class=\"token constant\">Describe</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Described</span> <span class=\"token hvariable\">a</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Describe</span> <span class=\"token constant\">True</span> <span class=\"token string\">\"This is true\"</span>\n<span class=\"token constant\">Describe</span> <span class=\"token constant\">True</span> <span class=\"token string\">\"This is true\"</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Described</span> <span class=\"token constant\">Bool</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">getValue</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Describe</span> <span class=\"token number\">3</span> <span class=\"token string\">\"a number\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">getDescription</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Describe</span> <span class=\"token number\">3</span> <span class=\"token string\">\"a number\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"a number\"</span></code></pre></div><h3 id=\"syntactic-note\" style=\"position:relative;\">Syntactic Note<a href=\"#syntactic-note\" aria-label=\"syntactic note permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>In the above definitions, we’ve used <code class=\"language-text\">a</code> as a type variable. However any word that starts with a lower case letter is fine. We could have defined <code class=\"language-text\">Maybe</code> like this:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">theType</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">theType</span></code></pre></div><p>The rules for Haskell identifiers are:</p><ul>\n<li>Type variables and names for functions and values start lower case (e.g. <code class=\"language-text\">a</code>, <code class=\"language-text\">map</code>, <code class=\"language-text\">xs</code>)</li>\n<li>Type names and constructor names start with upper case (e.g. <code class=\"language-text\">Maybe</code>, <code class=\"language-text\">Just</code>, <code class=\"language-text\">Card</code>, <code class=\"language-text\">Heart</code>)</li>\n</ul><p>Note that a type and its constructor can have the same name. This is very common in Haskell code for types that only have one constructor. In this material we try to avoid it to avoid confusion. Here are some examples:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Pair</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Pair</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">a</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Report</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Report</span> <span class=\"token constant\">Int</span> <span class=\"token constant\">String</span> <span class=\"token constant\">String</span>\n\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Pair</span>\n<span class=\"token constant\">Pair</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Pair</span> <span class=\"token hvariable\">a</span></code></pre></div><p>Beware of mixing up types and constructors. Luckily types and constructors can never occur in the same context, so you get a nice error:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token constant\">Maybe</span>                              <span class=\"token comment\">-- trying to use a type name as a value</span>\n<span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token builtin\">error</span><span class=\"token operator\">:</span>\n    • <span class=\"token constant\">Data</span> <span class=\"token hvariable\">constructor</span> <span class=\"token builtin\">not</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">scope</span><span class=\"token operator\">:</span> <span class=\"token constant\">Maybe</span>\n\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token builtin\">undefined</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Nothing</span>               <span class=\"token comment\">-- trying to use a constructor as a type</span>\n<span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token operator\">:</span> <span class=\"token builtin\">error</span><span class=\"token operator\">:</span>\n    <span class=\"token constant\">Not</span> <span class=\"token keyword\">in</span> <span class=\"token hvariable\">scope</span><span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> <span class=\"token hvariable\">constructor</span> <span class=\"token builtin\">or</span> <span class=\"token keyword\">class</span> ‘<span class=\"token constant\">Nothing</span>’</code></pre></div><h3 id=\"sidenote-multiple-type-parameters\" style=\"position:relative;\">Sidenote: Multiple Type Parameters<a href=\"#sidenote-multiple-type-parameters\" aria-label=\"sidenote multiple type parameters permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>Types can have multiple type parameters. The syntax is similar to defining functions with many arguments. Here’s the definition of the standard <code class=\"language-text\">Either</code> type:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Either</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Left</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Right</span> <span class=\"token hvariable\">b</span></code></pre></div><h2 id=\"exercises\" style=\"position:relative;\">Exercises<a href=\"#exercises\" aria-label=\"exercises permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>All exercises can be found in <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5a.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set5a</a>\nand <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5b.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set5b</a>. Please pay attention in the title of the exercise in which file the exercises of this section can be found.</p><h2 id=\"exercises-from-5a\" style=\"position:relative;\">Exercises from 5a:<a href=\"#exercises-from-5a\" aria-label=\"exercises from 5a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><text-box variant='exercise' name=\"Exercise 5a.3\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 3: Here's the definition for a datatype ShoppingEntry that</span>\n<span class=\"token comment\">-- represents an entry in a shopping basket. It has an item name (a</span>\n<span class=\"token comment\">-- String), an item price (a Double) and a count (an Int). You'll also</span>\n<span class=\"token comment\">-- find two examples of ShoppingEntry values.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Implement the functions totalPrice and buyOneMore below.</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">ShoppingEntry</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MkShoppingEntry</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Double</span> <span class=\"token constant\">Int</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span>\n\n<span class=\"token hvariable\">threeApples</span> <span class=\"token operator\">::</span> <span class=\"token constant\">ShoppingEntry</span>\n<span class=\"token hvariable\">threeApples</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MkShoppingEntry</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token number\">0.5</span> <span class=\"token number\">3</span>\n\n<span class=\"token hvariable\">twoBananas</span> <span class=\"token operator\">::</span> <span class=\"token constant\">ShoppingEntry</span>\n<span class=\"token hvariable\">twoBananas</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MkShoppingEntry</span> <span class=\"token string\">\"Banana\"</span> <span class=\"token number\">1.1</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\">-- totalPrice should return the total price for an entry</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Hint: you'll probably need fromIntegral to convert the Int into a</span>\n<span class=\"token comment\">-- Double</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   totalPrice threeApples  ==> 1.5</span>\n<span class=\"token comment\">--   totalPrice twoBananas   ==> 2.2</span>\n\n<span class=\"token hvariable\">totalPrice</span> <span class=\"token operator\">::</span> <span class=\"token constant\">ShoppingEntry</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Double</span>\n<span class=\"token hvariable\">totalPrice</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- buyOneMore should increment the count in an entry by one</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Example:</span>\n<span class=\"token comment\">--   buyOneMore twoBananas    ==> MkShoppingEntry \"Banana\" 1.1 3</span>\n\n<span class=\"token hvariable\">buyOneMore</span> <span class=\"token operator\">::</span> <span class=\"token constant\">ShoppingEntry</span> <span class=\"token operator\">-></span> <span class=\"token constant\">ShoppingEntry</span>\n<span class=\"token hvariable\">buyOneMore</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.4\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 4: define a datatype Person, which should contain the age (an</span>\n<span class=\"token comment\">-- Int) and the name (a String) of a person.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Also define a Person value fred, and the functions getAge, getName,</span>\n<span class=\"token comment\">-- setAge and setName (see below).</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Person</span> <span class=\"token operator\">=</span> <span class=\"token constant\">PersonUndefined</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span>\n\n<span class=\"token comment\">-- fred is a person whose name is Fred and age is 90</span>\n<span class=\"token hvariable\">fred</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Person</span>\n<span class=\"token hvariable\">fred</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- getName returns the name of the person</span>\n<span class=\"token hvariable\">getName</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Person</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">getName</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- getAge returns the age of the person</span>\n<span class=\"token hvariable\">getAge</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Person</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">getAge</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- setName takes a person and returns a new person with the name changed</span>\n<span class=\"token hvariable\">setName</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Person</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Person</span>\n<span class=\"token hvariable\">setName</span> <span class=\"token hvariable\">name</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- setAge does likewise for age</span>\n<span class=\"token hvariable\">setAge</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Person</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Person</span>\n<span class=\"token hvariable\">setAge</span> <span class=\"token hvariable\">age</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.5\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 5: define a datatype Position which contains two Int values, x</span>\n<span class=\"token comment\">-- and y. Also define the functions below for operating on a Position.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   getY (up (up origin))    ==> 2</span>\n<span class=\"token comment\">--   getX (up (right origin)) ==> 1</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">=</span> <span class=\"token constant\">PositionUndefined</span>\n\n<span class=\"token comment\">-- origin is a Position value with x and y set to 0</span>\n<span class=\"token hvariable\">origin</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Position</span>\n<span class=\"token hvariable\">origin</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- getX returns the x of a Position</span>\n<span class=\"token hvariable\">getX</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">getX</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- getY returns the y of a position</span>\n<span class=\"token hvariable\">getY</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">getY</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- up increases the y value of a position by one</span>\n<span class=\"token hvariable\">up</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Position</span>\n<span class=\"token hvariable\">up</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- right increases the x value of a position by one</span>\n<span class=\"token hvariable\">right</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Position</span>\n<span class=\"token hvariable\">right</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.6\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 6: Here's a datatype that represents a student. A student can</span>\n<span class=\"token comment\">-- either be a freshman, a nth year student, or graduated.</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Student</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Freshman</span> <span class=\"token operator\">|</span> <span class=\"token constant\">NthYear</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Graduated</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Eq</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Implement the function study, which changes a Freshman into a 1st</span>\n<span class=\"token comment\">-- year student, a 1st year student into a 2nd year student, and so</span>\n<span class=\"token comment\">-- on. A 7th year student gets changed to a graduated student. A</span>\n<span class=\"token comment\">-- graduated student stays graduated even if he studies.</span>\n\n<span class=\"token hvariable\">study</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Student</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Student</span>\n<span class=\"token hvariable\">study</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.7\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 7: define a datatype UpDown that represents a counter that can</span>\n<span class=\"token comment\">-- either be in increasing or decreasing mode. Also implement the</span>\n<span class=\"token comment\">-- functions zero, toggle, tick and get below.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- NB! Define _two_ constructors for your datatype (feel free to name the</span>\n<span class=\"token comment\">-- constructors however you want)</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- get (tick zero)</span>\n<span class=\"token comment\">--   ==> 1</span>\n<span class=\"token comment\">-- get (tick (tick zero))</span>\n<span class=\"token comment\">--   ==> 2</span>\n<span class=\"token comment\">-- get (tick (tick (toggle (tick zero))))</span>\n<span class=\"token comment\">--   ==> -1</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">UpDown</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UpDownUndefined1</span> <span class=\"token operator\">|</span> <span class=\"token constant\">UpDownUndefined2</span>\n\n<span class=\"token comment\">-- zero is an increasing counter with value 0</span>\n<span class=\"token hvariable\">zero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">UpDown</span>\n<span class=\"token hvariable\">zero</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- get returns the counter value</span>\n<span class=\"token hvariable\">get</span> <span class=\"token operator\">::</span> <span class=\"token constant\">UpDown</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">get</span> <span class=\"token hvariable\">ud</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- tick increases an increasing counter by one or decreases a</span>\n<span class=\"token comment\">-- decreasing counter by one</span>\n<span class=\"token hvariable\">tick</span> <span class=\"token operator\">::</span> <span class=\"token constant\">UpDown</span> <span class=\"token operator\">-></span> <span class=\"token constant\">UpDown</span>\n<span class=\"token hvariable\">tick</span> <span class=\"token hvariable\">ud</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n\n<span class=\"token comment\">-- toggle changes an increasing counter into a decreasing counter and</span>\n<span class=\"token comment\">-- vice versa</span>\n<span class=\"token hvariable\">toggle</span> <span class=\"token operator\">::</span> <span class=\"token constant\">UpDown</span> <span class=\"token operator\">-></span> <span class=\"token constant\">UpDown</span>\n<span class=\"token hvariable\">toggle</span> <span class=\"token hvariable\">ud</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.8\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 8: you'll find a Color datatype below. It has the three basic</span>\n<span class=\"token comment\">-- colours Red, Green and Blue, and two color transformations, Mix and</span>\n<span class=\"token comment\">-- Invert.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Mix means the average of the two colors in each rgb channel.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Invert means subtracting all rgb values from 1.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Implement the function rgb :: Color -> [Double] that returns a list</span>\n<span class=\"token comment\">-- of length three that represents the rgb value of the given color.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- rgb Red   ==> [1,0,0]</span>\n<span class=\"token comment\">-- rgb Green ==> [0,1,0]</span>\n<span class=\"token comment\">-- rgb Blue  ==> [0,0,1]</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- rgb (Mix Red Green)                    ==> [0.5,0.5,0]</span>\n<span class=\"token comment\">-- rgb (Mix Red (Mix Red Green))          ==> [0.75,0.25,0]</span>\n<span class=\"token comment\">-- rgb (Invert Red)                       ==> [0,1,1]</span>\n<span class=\"token comment\">-- rgb (Invert (Mix Red (Mix Red Green))) ==> [0.25,0.75,1]</span>\n<span class=\"token comment\">-- rgb (Mix (Invert Red) (Invert Green))  ==> [0.5,0.5,1]</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Color</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Red</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Green</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Blue</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Mix</span> <span class=\"token constant\">Color</span> <span class=\"token constant\">Color</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Invert</span> <span class=\"token constant\">Color</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span>\n\n<span class=\"token hvariable\">rgb</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Color</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Double</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">rgb</span> <span class=\"token hvariable\">col</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5a.9\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 9: define a parameterized datatype OneOrTwo that contains one or</span>\n<span class=\"token comment\">-- two values of the given type. The constructors should be called One and Two.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   One True         ::  OneOrTwo Bool</span>\n<span class=\"token comment\">--   Two \"cat\" \"dog\"  ::  OneOrTwo String</span></code></pre></div></text-box></div>","frontmatter":{"path":"/part-19/2-type-parameters","title":"Type Parameters"},"fileAbsolutePath":"/home/runner/work/COPL-oop-25/COPL-oop-25/data/part-19/2.md"},"allPages":{"edges":[{"node":{"id":"70db426a-57dc-59f3-be21-475d2cf02f95","frontmatter":{"path":"/all-exercises","title":"All exercises"}}},{"node":{"id":"0ff36324-cef6-5dd9-8bc9-7d1a4cdfa653","frontmatter":{"path":"/error_messages","title":"Common Python error messages"}}},{"node":{"id":"a364b6da-5181-5f8d-b6ca-88f0a492b162","frontmatter":{"path":"/exam","title":"Exam 4.6."}}},{"node":{"id":"76ca1364-2558-5dd3-9076-b9f2daff80e1","frontmatter":{"path":"/exam-adv","title":"Advanced Course in Programming exam 24.02."}}},{"node":{"id":"9d286f0c-3dc4-576e-b256-647729faba53","frontmatter":{"path":"/exam-intro","title":"Introduction to Programming exam 13.01."}}},{"node":{"id":"b59f028e-d6b0-5e1c-96bd-45f04036805e","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"f315e566-70ae-5ed8-b4a7-21375dfed100","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"f03b8a6c-e45d-5374-a650-098e7ef62219","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"10057648-387a-54a2-afe0-d7e150eabf3b","frontmatter":{"path":"/error_haskell_messages","title":"Common Haskell error messages"}}},{"node":{"id":"212221a5-8a78-5136-ba59-a96d46b762d0","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"791bc9c7-c446-523e-949b-20e9ff37f966","frontmatter":{"path":"/glossary","title":"Glossary"}}},{"node":{"id":"2cdc5b02-5657-5cb6-bc4d-f5f14fb5ea81","frontmatter":{"path":"/support-and-assistance","title":"Support and assistance"}}},{"node":{"id":"3982b053-9e05-569a-992e-796f6b50cadf","frontmatter":{"path":"/part-10/1-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"8695865d-affb-57ed-9994-7bde990ed173","frontmatter":{"path":"/part-10/2-access-modifiers","title":"Access modifiers"}}},{"node":{"id":"738298bc-1412-55ff-b427-0836a4f25860","frontmatter":{"path":"/part-10/3-oo-programming-techniques","title":"Object oriented programming techniques"}}},{"node":{"id":"022a71da-dc0b-55cb-aeb2-ae1c881fddf0","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"a21d013a-378d-59b0-a1f6-0f9ef7c26205","frontmatter":{"path":"/part-11/1-list-comprehensions","title":"List comprehensions"}}},{"node":{"id":"3a67469a-a235-5dfb-9f74-be9c104a1c17","frontmatter":{"path":"/part-11/2-more-comprehensions","title":"More comprehensions"}}},{"node":{"id":"cc2ae34a-275b-5de5-a9ab-8381641e85a4","frontmatter":{"path":"/part-12/1-functions-as-arguments","title":"Functions as arguments"}}},{"node":{"id":"b0423f17-6d06-50a6-b986-e8ee96be5929","frontmatter":{"path":"/part-10/4-application-development","title":"Developing a larger application"}}},{"node":{"id":"33c7a0c6-129e-5252-a6f9-a8fcee13c484","frontmatter":{"path":"/part-12/2-generators","title":"Generators"}}},{"node":{"id":"edc5eb53-ca3e-584a-96e6-354dee642d66","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"2cb47b32-2e90-59ad-b688-78f714ba84d2","frontmatter":{"path":"/part-11/3-recursion","title":"Recursion"}}},{"node":{"id":"e232b871-c727-5d49-b360-852b3e5987e9","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"6912be65-e19f-5a8e-b5c5-701bfd90e28c","frontmatter":{"path":"/part-13/1-pygame","title":"Pygame"}}},{"node":{"id":"4cfc6877-59d4-56b5-9b3d-d673d8b01f01","frontmatter":{"path":"/part-13/2-animation","title":"Animation"}}},{"node":{"id":"97f38cd2-063c-5350-81f0-8d675e6ac151","frontmatter":{"path":"/part-13/3-events","title":"Events"}}},{"node":{"id":"e4994455-e1d5-5dbe-8ca1-0a1dce98c5d7","frontmatter":{"path":"/part-13/4-more-pygame-techniques","title":"More pygame techniques"}}},{"node":{"id":"7cb083a3-43ea-584c-ae50-cd411df43d30","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"2feac3ab-fbb2-55aa-a50b-4a16ea4864b7","frontmatter":{"path":"/part-14/1-game-project","title":"Game project"}}},{"node":{"id":"a653435c-496f-52e9-be6b-9003b5fa477f","frontmatter":{"path":"/part-14/2-robot-and-boxes","title":"Robot and boxes"}}},{"node":{"id":"5012c39f-db76-5cd1-9047-dfde06d29aa9","frontmatter":{"path":"/part-14/3-finishing-the-game","title":"Finishing the game"}}},{"node":{"id":"860b9e5e-9675-59a0-9bc8-2596f6cbe6f8","frontmatter":{"path":"/part-11/4-more-recursion-examples","title":"More recursion examples"}}},{"node":{"id":"449c1384-ffb9-5f49-86f9-2eea78b203d4","frontmatter":{"path":"/part-12/3-functional-programming","title":"Functional programming"}}},{"node":{"id":"ab918593-3fda-589d-acc2-258f3c133352","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"4534bd15-62bb-5e29-9277-c4093b3d47ad","frontmatter":{"path":"/part-15/2-haskell","title":"So what is Haskell?"}}},{"node":{"id":"9fbe1e6c-b40c-59a3-925e-e2b4172f20b6","frontmatter":{"path":"/part-15/3-letsstart","title":"Let’s Start"}}},{"node":{"id":"6aaec35c-ac81-5222-bedf-23f7675bb971","frontmatter":{"path":"/part-15/4-expressions-and-types","title":"Expressions and Types"}}},{"node":{"id":"f2efd7ef-56f7-5ecc-85d6-9aa3d6721ae0","frontmatter":{"path":"/part-15/5-structure-of-haskell","title":"The Structure of a Haskell Program"}}},{"node":{"id":"9383f945-4456-51c5-aec9-34e99e0612fd","frontmatter":{"path":"/part-15/6-working-with-examples","title":"Working with examples"}}},{"node":{"id":"cbbb276e-5024-5cc0-bcb1-8efdcf27dcdd","frontmatter":{"path":"/part-15/7-getting-things-done","title":"How Do I Get Anything Done?"}}},{"node":{"id":"9658bac3-2c3a-5210-878b-800934662fed","frontmatter":{"path":"/part-15/8s-all-together","title":"All Together Now!"}}},{"node":{"id":"ed319291-57f9-5f87-abf2-366c4b8624dd","frontmatter":{"path":"/part-15/9-wrapping-up","title":"Wrapping up: Indentation, Quiz, Cheatsheet"}}},{"node":{"id":"36c7eeab-221c-5e64-9be8-4c83589784c1","frontmatter":{"path":"/part-15/1-objects-and-methods","title":"Intro Haskell"}}},{"node":{"id":"8e95242d-046a-5fc5-a279-8b994675111b","frontmatter":{"path":"/part-15","title":"Part 15"}}},{"node":{"id":"806fa8b9-de69-5b17-ad78-2304f33b751e","frontmatter":{"path":"/part-16/3-immutability-inference-polymorphism","title":"Some notes on Immutability, Type Inference and Polymorphism"}}},{"node":{"id":"971ef0bf-246c-5e0a-8b11-158995ea1348","frontmatter":{"path":"/part-16/2-lists","title":"Lists"}}},{"node":{"id":"231fde5b-3a9f-5a78-838a-9ff3da62f2bb","frontmatter":{"path":"/part-16/4-the-maybe-type","title":"The Maybe type"}}},{"node":{"id":"c7409da1-6711-50c3-b1a8-618c60271ae3","frontmatter":{"path":"/part-16/1-recursion-helper-functions","title":"Recursion Helper Functions and Guards"}}},{"node":{"id":"ee12b151-bbfd-5303-97ce-fae854429639","frontmatter":{"path":"/part-16/5-the-either-type","title":"The Either type"}}},{"node":{"id":"55c41937-9e28-50c1-808e-fcc3fa43a221","frontmatter":{"path":"/part-16/6-the-case-of-expression","title":"The case-of Expression"}}},{"node":{"id":"67d9a2e7-2255-5de4-8ff8-4f89cf3c3e4b","frontmatter":{"path":"/part-16","title":"Part 16"}}},{"node":{"id":"888943e8-39c6-58d4-b223-c98b8d5f4bed","frontmatter":{"path":"/part-16/7-recap","title":"Recap, Quiz and Cheatsheet"}}},{"node":{"id":"1af85660-9bc5-533a-abd4-4fafc217fa2a","frontmatter":{"path":"/part-17/1-functional-programming","title":"Functional Programming, at Last"}}},{"node":{"id":"1b38f7cc-7add-5cd7-b536-63294bd8082e","frontmatter":{"path":"/part-17/2-partial-prefix-infix","title":"Partial Application, Prefix and Infix"}}},{"node":{"id":"1c737b87-526a-5911-b33d-f5eed3685c79","frontmatter":{"path":"/part-17/3-lambdas","title":"Lambdas"}}},{"node":{"id":"2f4d4f8b-88e2-5f6f-a3d1-0953546035f9","frontmatter":{"path":"/part-17/4-more-operators","title":"The . and $ operators, List wranging (takewhile, etc)"}}},{"node":{"id":"ef89dc84-be20-5512-8418-095b872581cf","frontmatter":{"path":"/part-17/6-something-fun","title":"List Comprehensions, Custom Operators, Typed Holes"}}},{"node":{"id":"8c277ecb-948b-52cf-a12f-f118976b45a7","frontmatter":{"path":"/part-17","title":"Part 17"}}},{"node":{"id":"25a975c9-ac1b-50ad-a932-d0471c204a44","frontmatter":{"path":"/part-17/5-lists-and-recursion","title":"Lists and Recursion"}}},{"node":{"id":"989f79cf-e3a5-5458-bce5-8b0c8ed61354","frontmatter":{"path":"/part-17/7-quiz","title":"Wrapping up + quiz"}}},{"node":{"id":"90746aeb-e10c-5267-804b-7dbdc30fbcf1","frontmatter":{"path":"/part-18/3-type-classes","title":"Type Classes and Constraints"}}},{"node":{"id":"f923abd0-c92f-533e-a372-be06ed8af825","frontmatter":{"path":"/part-18/2-folding","title":"Folding"}}},{"node":{"id":"3a41f183-354f-5d08-b4d0-1850b2c6e0aa","frontmatter":{"path":"/part-18/1-tuples","title":"Tuples"}}},{"node":{"id":"dcd79ec6-5424-53ab-92e0-80423138ec4e","frontmatter":{"path":"/part-18/4-type-classes","title":"Standard Type Classes"}}},{"node":{"id":"7533b38a-02f6-50e5-b930-6c4b94e5d864","frontmatter":{"path":"/part-18/5-data-maps","title":"Data Maps"}}},{"node":{"id":"bced3c35-04a7-56ba-939c-6ecc6b4c5336","frontmatter":{"path":"/part-18/6-data-arrays","title":"Data Arrays"}}},{"node":{"id":"b11f698a-e49a-5911-b037-9910b5ccd078","frontmatter":{"path":"/part-18/8-quiz","title":"Quiz"}}},{"node":{"id":"b22d2862-78d9-56d8-83e4-7d3be7c20c51","frontmatter":{"path":"/part-18/7-reading-docs","title":"Reading Docs"}}},{"node":{"id":"0aa2bf0c-e8e8-5038-bb01-c9defbed65ad","frontmatter":{"path":"/part-18","title":"Part 18"}}},{"node":{"id":"8209d3f3-3607-5fa9-a270-065f72867c2f","frontmatter":{"path":"/part-19/1-algebraic-datatypes","title":"Algebraic Datatypes"}}},{"node":{"id":"07d9a1cd-d5e7-502f-badc-3ec47695e4f5","frontmatter":{"path":"/part-19/2-type-parameters","title":"Type Parameters"}}},{"node":{"id":"f058d32f-70fb-5e45-b33f-92c8b9925203","frontmatter":{"path":"/part-19/3-recursive-types","title":"Recursive Types"}}},{"node":{"id":"37b614c2-ba14-5c92-8d1f-f4f579f59a4a","frontmatter":{"path":"/part-19/4-record-syntax","title":"Record Syntax"}}},{"node":{"id":"773e8396-9ae3-5c75-9881-9d4a626a4528","frontmatter":{"path":"/part-19/5-summary","title":"Summary of Algebraic Datatypes"}}},{"node":{"id":"67375c22-2685-5e2a-9ec9-8a04958a8239","frontmatter":{"path":"/part-19/7-quiz","title":"Quiz"}}},{"node":{"id":"e90289c1-8e47-5749-9f41-2315b193ca54","frontmatter":{"path":"/part-19/6-how","title":"How do Algebraic Datatypes Work?"}}},{"node":{"id":"fc96aa55-9df9-5b92-b68f-f306732b5dbe","frontmatter":{"path":"/part-19","title":"Part 19"}}},{"node":{"id":"04351fcb-c53a-57d3-8fd3-3145854114a3","frontmatter":{"path":"/part-8/1-objects-and-methods","title":"Objects and methods"}}},{"node":{"id":"b7d1721d-9c3f-55bc-8e1f-336ba9a3781a","frontmatter":{"path":"/part-8/3-defining-classes","title":"Defining classes"}}},{"node":{"id":"efe1c1c6-69db-5355-bd7d-35b01bc6de13","frontmatter":{"path":"/part-8/2-classes-and-objects","title":"Classes and objects"}}},{"node":{"id":"11dec441-ecf7-5a8e-a0eb-8b9cae46b80a","frontmatter":{"path":"/part-8/4-defining-methods","title":"Defining methods"}}},{"node":{"id":"50518a59-9120-5a26-b46b-84903dc1f8c7","frontmatter":{"path":"/part-8/5-more-examples-of-classes","title":"More examples of classes"}}},{"node":{"id":"182487cc-f79f-5454-bccb-fdb7051209ef","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"07168394-9f19-5d64-addc-c1af579a656d","frontmatter":{"path":"/part-9/2-objects-as-attributes","title":"Objects as attributes"}}},{"node":{"id":"d1d16ea0-e607-5d88-9485-acbf463bb81c","frontmatter":{"path":"/part-9/1-objects-and-references","title":"Objects and references"}}},{"node":{"id":"9fe368ff-008c-533f-9c5a-ca8af65d3c7d","frontmatter":{"path":"/part-9/3-encapsulation","title":"Encapsulation"}}},{"node":{"id":"8b3547b9-42f6-52fb-95f0-af81fdd2b422","frontmatter":{"path":"/part-9/4-scope-of-methods","title":"Scope of methods"}}},{"node":{"id":"d839c260-d9fe-59f2-bbae-ab5b84733e8d","frontmatter":{"path":"/part-9/5-class-attributes","title":"Class attributes"}}},{"node":{"id":"2f8cfcd1-55ca-54fb-9c46-f137fb6e918f","frontmatter":{"path":"/part-9/6-more-examples-with-classes","title":"More examples with classes"}}},{"node":{"id":"c60da7d6-42f6-5838-b760-1a897b2b2cc1","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"3dbd990a-41f7-56cb-94f8-b4e75b2965ef","frontmatter":{"path":"/setup/1-vscode","title":"The Visual Studio Code editor, Python interpreter and built-in debugging tool"}}},{"node":{"id":"298bb9e9-8780-597a-bb4e-f523b9f8c952","frontmatter":{"path":"/setup","title":"Setup (VS code)"}}},{"node":{"id":"1376d519-cc29-5db1-b33d-fe70f4ce8483","frontmatter":{"path":"/part-14/4-your-own-game","title":"Your own game"}}},{"node":{"id":"73ccfff1-6985-57bc-b08f-2cedce055fb9","frontmatter":{"path":"/part-12/4-regular-expressions","title":"Regular expressions"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["1357757885","994120085"]}