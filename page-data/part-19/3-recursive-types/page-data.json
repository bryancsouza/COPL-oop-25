{
    "componentChunkName": "component---src-templates-course-content-template-js",
    "path": "/part-19/3-recursive-types",
    "result": {"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning objectives"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After this section"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to define a recursive data type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know in particular how to use a tree in Haskell"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So far, all of the types weâ€™ve defined have been of constant size. We can represent one report or one colour, but how could we represent a collection of things? We could use lists of course, but could we define a list type ourselves?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like Haskell functions, Haskell data types can be "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"recursive"}]},{"type":"text","value":". This is no weirder than having an object in Java or Python that refers to another object of the same class. This is how you define a list of integers:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ihead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ihead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"itail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"itail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ilength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ilength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ilength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ilength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We can use the functions defined above to work with lists of integers:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ihead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"itail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ilength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that we canâ€™t put values other than "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"s inside our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"IntList"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Prelude> Node False Empty\n\n<interactive>:3:6: error:\n    â€¢ Couldn't match expected type â€˜Intâ€™ with actual type â€˜Boolâ€™\n    â€¢ In the first argument of â€˜Nodeâ€™, namely â€˜Falseâ€™\n        In the expression: Node False Empty\n        In an equation for â€˜itâ€™: it = Node False Empty"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To be able to put any type of element in our list, letâ€™s do the same thing with a type parameter. This is the same as the built in type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"[a]"}]},{"type":"text","value":", but with slightly clunkier syntax:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"text"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-text"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"data List a = Empty | Node a (List a)\n    deriving Show"}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note how we need to pass the the type parameter "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" onwards in the recursion. We need to write "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Node a (List a)"}]},{"type":"text","value":" instead of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Node a List"}]},{"type":"text","value":". The "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" constructor has two arguments. The first has type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":", and the second has type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List a"}]},{"type":"text","value":". Here are the reimplementations of some standard list functions for our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" type:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lhead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lhead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"h"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ltail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ltail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lnull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lnull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lnull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"     "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"llength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"llength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"llength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"llength"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lhead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"ltail"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"lnull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that just like with normal Haskell lists, we canâ€™t have elements of different types in the same list:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"foo\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"interactive"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">:"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"5"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"12"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"error"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":"\n    â€¢ "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Couldn'"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"match"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"type"}]},{"type":"text","value":" â€˜"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Char"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"â€™ "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"with"}]},{"type":"text","value":" â€˜"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"â€™\n        "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Expected"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"type"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Actual"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"type"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"List"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Char"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"\n    â€¢ "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"In"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"the"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"second"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"argument"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"of"}]},{"type":"text","value":" â€˜"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":"â€™"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"namely"}]},{"type":"text","value":" â€˜"},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"foo\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"â€™\n        "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"In"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"the"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"expression"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"foo\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n        "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"In"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"an"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"equation"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"for"}]},{"type":"text","value":" â€˜"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"it"}]},{"type":"text","value":"â€™"},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"it"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"foo\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"h3","properties":{"id":"example-growing-a-tree","style":"position:relative;"},"children":[{"type":"text","value":"Example: Growing a Tree"},{"type":"element","tagName":"a","properties":{"href":"#example-growing-a-tree","ariaLabel":"example growing a tree permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like a list, we can also represent a binary tree:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Our tree contains nodes, which contain a value of type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" and two child trees, and empty trees."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In case youâ€™re not familiar with binary trees, theyâ€™re a data structure thatâ€™s often used as the basis for other data structures ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Data.Map"}]},{"type":"text","value":" is based on trees!). Binary trees are often drawn as (upside-down) pictures, like this:"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"/COPL-oop-25/20bf68c8589e68cae3c7b86beced78ee/binaryTree.svg","alt":""},"children":[]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The highest node in the tree is called the "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"root"}]},{"type":"text","value":" ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" in this case), and the nodes with no children are called "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"leaves"}]},{"type":"text","value":" ("},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" in this case). We can define this tree using our "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" type like this:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"example"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"example"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n                            "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n                    "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"4"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The height of a binary tree is length of the longest path from the root to a leaf. In Haskell terms, itâ€™s how many nested levels of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" constructors you need to build the tree. The height of our example tree is 3. Hereâ€™s a function that computes the height of a tree:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeHeight"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"+"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"max"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In case youâ€™re familiar with "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"binary search trees"}]},{"type":"text","value":", here are the definitions of the lookup and insert opertions for a binary search tree. If you donâ€™t know what Iâ€™m talking about, you donâ€™t need to understand this."}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"lookup"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"lookup"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"lookup"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"lookup"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"lookup"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"otherwise"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Empty"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"<"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"insert"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n    "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"otherwise"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Node"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"l"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"r"}]}]}]}]},{"type":"element","tagName":"h2","properties":{"id":"exercises","style":"position:relative;"},"children":[{"type":"text","value":"Exercises"},{"type":"element","tagName":"a","properties":{"href":"#exercises","ariaLabel":"exercises permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All exercises can be found in "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5a.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set5a"}]},{"type":"text","value":"\nand "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5b.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set5b"}]},{"type":"text","value":". Please pay attention in the title of the exercise in which file the exercises of this section can be found."}]},{"type":"element","tagName":"h2","properties":{"id":"exercises-from-5b","style":"position:relative;"},"children":[{"type":"text","value":"Exercises from 5b:"},{"type":"element","tagName":"a","properties":{"href":"#exercises-from-5b","ariaLabel":"exercises from 5b permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.1"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 1: implement the function valAtRoot which returns the value at"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- the root (top-most node) of the tree. The return value is Maybe a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- because the tree might be empty (i.e. just a Empty)"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"valAtRoot"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"valAtRoot"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.2"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 2: compute the size of a tree, that is, the number of Node"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- constructors in it"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   treeSize (Node 3 (Node 7 Empty Empty) Empty)  ==>  2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   treeSize (Node 3 (Node 7 Empty Empty) (Node 1 Empty Empty))  ==>  3"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeSize"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeSize"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.3"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 3: get the largest value in a tree of positive Ints. The"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- largest value of an empty tree should be 0."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   treeMax Empty  ==>  0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   treeMax (Node 3 (Node 5 Empty Empty) (Node 4 Empty Empty))  ==>  5"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeMax"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"treeMax"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.4"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 4: implement a function that checks if all tree values satisfy a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- condition."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   allValues (>0) Empty  ==>  True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   allValues (>0) (Node 1 Empty (Node 2 Empty Empty))  ==>  True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   allValues (>0) (Node 1 Empty (Node 0 Empty Empty))  ==>  False"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"allValues"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"allValues"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"condition"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.5"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 5: implement map for trees."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- mapTree (+1) Empty  ==>  Empty"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- mapTree (+2) (Node 0 (Node 1 Empty Empty) (Node 2 Empty Empty))"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   ==> (Node 2 (Node 3 Empty Empty) (Node 4 Empty Empty))"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"mapTree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"b"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"b"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"mapTree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"f"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.6"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 6: given a value and a tree, build a new tree that is the same,"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- except all nodes that contain the value have been removed. Also"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- remove the subnodes of the removed nodes."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Check file for more in depth examples"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"cull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Eq"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"cull"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"val"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.7"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 7: check if a tree is ordered. A tree is ordered if:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--  * all values to the left of the root are smaller than the root value"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--  * all of the values to the right of the root are larger than the root value"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--  * and the left and right subtrees are ordered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Hint: allValues will help you here!"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Check file for more in depth examples"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"isOrdered"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Ord"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"isOrdered"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.8"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 8: a path in a tree can be represented as a list of steps that"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- go either left or right."}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Step"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"StepL"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"|"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"StepR"}]},{"type":"text","value":"\n  "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"deriving"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Show"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":","}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Eq"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Define a function walk that takes a tree and a list of steps, and"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- returns the value at that point. Return Nothing if you fall of the"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- tree (i.e. hit a Empty)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   walk [] (Node 1 (Node 2 Empty Empty) Empty)       ==>  Just 1"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   walk [StepL] (Node 1 (Node 2 Empty Empty) Empty)  ==>  Just 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   walk [StepL,StepL] (Node 1 (Node 2 Empty Empty) Empty)  ==>  Nothing"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"walk"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Step"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"walk"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.9"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 9: given a tree, a path and a value, set the value at the end of"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- the path to the given value. Since Haskell datastructures are"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- immutable, you'll need to build a new tree."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- If the path falls off the tree, do nothing."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Check file for more in depth examples"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"set"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Step"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"set"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"path"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"val"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 5b.10`"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 10: given a value and a tree, return a path that goes from the"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- root to the value. If the value doesn't exist in the tree, return Nothing."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- You may assume the value occurs in the tree at most once."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   search 1 (Node 2 (Node 1 Empty Empty) (Node 3 Empty Empty))  ==>  Just [StepL]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   search 1 (Node 2 (Node 4 Empty Empty) (Node 3 Empty Empty))  ==>  Nothing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   search 1 (Node 2 (Node 3 (Node 4 Empty Empty)"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--                            (Node 1 Empty Empty))"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--                    (Node 5 Empty Empty))                     ==>  Just [StepL,StepR]"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"search"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Eq"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"=>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Tree"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Step"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"search"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name=\"Learning objectives\"><p>After this section</p><ul>\n<li>You know how to define a recursive data type</li>\n<li>You know in particular how to use a tree in Haskell</li>\n</ul></text-box><p>So far, all of the types weâ€™ve defined have been of constant size. We can represent one report or one colour, but how could we represent a collection of things? We could use lists of course, but could we define a list type ourselves?</p><p>Just like Haskell functions, Haskell data types can be <em>recursive</em>. This is no weirder than having an object in Java or Python that refers to another object of the same class. This is how you define a list of integers:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">IntList</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Node</span> <span class=\"token constant\">Int</span> <span class=\"token constant\">IntList</span>\n    <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span>\n\n<span class=\"token hvariable\">ihead</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IntList</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">ihead</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">i</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">i</span>\n\n<span class=\"token hvariable\">itail</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IntList</span> <span class=\"token operator\">-></span> <span class=\"token constant\">IntList</span>\n<span class=\"token hvariable\">itail</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">t</span>\n\n<span class=\"token hvariable\">ilength</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IntList</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">ilength</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">ilength</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">ilength</span> <span class=\"token hvariable\">t</span></code></pre></div><p>We can use the functions defined above to work with lists of integers:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">ihead</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">4</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">itail</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">4</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Node</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">4</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">ilength</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">4</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span></code></pre></div><p>Note that we canâ€™t put values other than <code class=\"language-text\">Int</code>s inside our <code class=\"language-text\">IntList</code>:</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Prelude> Node False Empty\n\n&lt;interactive>:3:6: error:\n    â€¢ Couldn't match expected type â€˜Intâ€™ with actual type â€˜Boolâ€™\n    â€¢ In the first argument of â€˜Nodeâ€™, namely â€˜Falseâ€™\n        In the expression: Node False Empty\n        In an equation for â€˜itâ€™: it = Node False Empty</code></pre></div><p>To be able to put any type of element in our list, letâ€™s do the same thing with a type parameter. This is the same as the built in type <code class=\"language-text\">[a]</code>, but with slightly clunkier syntax:</p><div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data List a = Empty | Node a (List a)\n    deriving Show</code></pre></div><p>Note how we need to pass the the type parameter <code class=\"language-text\">a</code> onwards in the recursion. We need to write <code class=\"language-text\">Node a (List a)</code> instead of <code class=\"language-text\">Node a List</code>. The <code class=\"language-text\">Node</code> constructor has two arguments. The first has type <code class=\"language-text\">a</code>, and the second has type <code class=\"language-text\">List a</code>. Here are the reimplementations of some standard list functions for our <code class=\"language-text\">List</code> type:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">lhead</span> <span class=\"token operator\">::</span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">lhead</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">h</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">h</span>\n\n<span class=\"token hvariable\">ltail</span> <span class=\"token operator\">::</span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">ltail</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">t</span>\n\n<span class=\"token hvariable\">lnull</span> <span class=\"token operator\">::</span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">lnull</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n<span class=\"token hvariable\">lnull</span> <span class=\"token hvariable\">_</span>     <span class=\"token operator\">=</span> <span class=\"token constant\">False</span>\n\n<span class=\"token hvariable\">llength</span> <span class=\"token operator\">::</span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">llength</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">llength</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">llength</span> <span class=\"token hvariable\">t</span>\n\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">lhead</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token constant\">True</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">True</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">ltail</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token constant\">True</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token constant\">False</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Node</span> <span class=\"token constant\">False</span> <span class=\"token constant\">Empty</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">lnull</span> <span class=\"token constant\">Empty</span>\n<span class=\"token constant\">True</span></code></pre></div><p>Note that just like with normal Haskell lists, we canâ€™t have elements of different types in the same list:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token constant\">Node</span> <span class=\"token constant\">True</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token string\">\"foo\"</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span><span class=\"token hvariable\">interactive</span><span class=\"token operator\">>:</span><span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token number\">12</span><span class=\"token operator\">:</span> <span class=\"token builtin\">error</span><span class=\"token operator\">:</span>\n    â€¢ <span class=\"token constant\">Couldn'</span><span class=\"token hvariable\">t</span> <span class=\"token hvariable\">match</span> <span class=\"token keyword\">type</span> â€˜<span class=\"token punctuation\">[</span><span class=\"token constant\">Char</span><span class=\"token punctuation\">]</span>â€™ <span class=\"token hvariable\">with</span> â€˜<span class=\"token constant\">Bool</span>â€™\n        <span class=\"token constant\">Expected</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">List</span> <span class=\"token constant\">Bool</span>\n        <span class=\"token constant\">Actual</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">List</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Char</span><span class=\"token punctuation\">]</span>\n    â€¢ <span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">second</span> <span class=\"token hvariable\">argument</span> <span class=\"token keyword\">of</span> â€˜<span class=\"token constant\">Node</span>â€™<span class=\"token punctuation\">,</span> <span class=\"token hvariable\">namely</span> â€˜<span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token string\">\"foo\"</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>â€™\n        <span class=\"token constant\">In</span> <span class=\"token hvariable\">the</span> <span class=\"token hvariable\">expression</span><span class=\"token operator\">:</span> <span class=\"token constant\">Node</span> <span class=\"token constant\">True</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token string\">\"foo\"</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n        <span class=\"token constant\">In</span> <span class=\"token hvariable\">an</span> <span class=\"token hvariable\">equation</span> <span class=\"token hvariable\">for</span> â€˜<span class=\"token hvariable\">it</span>â€™<span class=\"token operator\">:</span> <span class=\"token hvariable\">it</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token constant\">True</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token string\">\"foo\"</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span></code></pre></div><h3 id=\"example-growing-a-tree\" style=\"position:relative;\">Example: Growing a Tree<a href=\"#example-growing-a-tree\" aria-label=\"example growing a tree permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>Just like a list, we can also represent a binary tree:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">a</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Empty</span></code></pre></div><p>Our tree contains nodes, which contain a value of type <code class=\"language-text\">a</code> and two child trees, and empty trees.</p><p>In case youâ€™re not familiar with binary trees, theyâ€™re a data structure thatâ€™s often used as the basis for other data structures (<code class=\"language-text\">Data.Map</code> is based on trees!). Binary trees are often drawn as (upside-down) pictures, like this:</p><p><img src=\"/COPL-oop-25/20bf68c8589e68cae3c7b86beced78ee/binaryTree.svg\" alt=\"\"></p><p>The highest node in the tree is called the <em>root</em> (<code class=\"language-text\">0</code> in this case), and the nodes with no children are called <code class=\"language-text\">leaves</code> (<code class=\"language-text\">2</code>, <code class=\"language-text\">3</code> and <code class=\"language-text\">4</code> in this case). We can define this tree using our <code class=\"language-text\">Tree</code> type like this:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">example</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Tree</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">3</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">4</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div><p>The height of a binary tree is length of the longest path from the root to a leaf. In Haskell terms, itâ€™s how many nested levels of <code class=\"language-text\">Node</code> constructors you need to build the tree. The height of our example tree is 3. Hereâ€™s a function that computes the height of a tree:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">treeHeight</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">l</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token hvariable\">l</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">==></span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span>\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">1</span> <span class=\"token constant\">Empty</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token number\">0</span> <span class=\"token number\">1</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">2</span>\n<span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">1</span> <span class=\"token constant\">Empty</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">1</span> <span class=\"token constant\">Empty</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token number\">2</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">treeHeight</span> <span class=\"token constant\">Empty</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">max</span> <span class=\"token number\">2</span> <span class=\"token number\">0</span>\n    <span class=\"token operator\">==></span> <span class=\"token number\">3</span></code></pre></div><p>In case youâ€™re familiar with <em>binary search trees</em>, here are the definitions of the lookup and insert opertions for a binary search tree. If you donâ€™t know what Iâ€™m talking about, you donâ€™t need to understand this.</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">lookup</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token builtin\">lookup</span> <span class=\"token hvariable\">x</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token constant\">False</span>\n<span class=\"token builtin\">lookup</span> <span class=\"token hvariable\">x</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">l</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">lookup</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">l</span>\n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">lookup</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">r</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span>\n\n<span class=\"token hvariable\">insert</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">insert</span> <span class=\"token hvariable\">x</span> <span class=\"token constant\">Empty</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">x</span> <span class=\"token constant\">Empty</span> <span class=\"token constant\">Empty</span>\n<span class=\"token hvariable\">insert</span> <span class=\"token hvariable\">x</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Node</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">l</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">y</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">insert</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">l</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">r</span>\n    <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">l</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">insert</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">|</span> <span class=\"token builtin\">otherwise</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Node</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">l</span> <span class=\"token hvariable\">r</span></code></pre></div><h2 id=\"exercises\" style=\"position:relative;\">Exercises<a href=\"#exercises\" aria-label=\"exercises permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>All exercises can be found in <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5a.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set5a</a>\nand <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set5b.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set5b</a>. Please pay attention in the title of the exercise in which file the exercises of this section can be found.</p><h2 id=\"exercises-from-5b\" style=\"position:relative;\">Exercises from 5b:<a href=\"#exercises-from-5b\" aria-label=\"exercises from 5b permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><text-box variant='exercise' name=\"Exercise 5b.1\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 1: implement the function valAtRoot which returns the value at</span>\n<span class=\"token comment\">-- the root (top-most node) of the tree. The return value is Maybe a</span>\n<span class=\"token comment\">-- because the tree might be empty (i.e. just a Empty)</span>\n\n<span class=\"token hvariable\">valAtRoot</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">valAtRoot</span> <span class=\"token hvariable\">t</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.2\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 2: compute the size of a tree, that is, the number of Node</span>\n<span class=\"token comment\">-- constructors in it</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   treeSize (Node 3 (Node 7 Empty Empty) Empty)  ==>  2</span>\n<span class=\"token comment\">--   treeSize (Node 3 (Node 7 Empty Empty) (Node 1 Empty Empty))  ==>  3</span>\n\n<span class=\"token hvariable\">treeSize</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">treeSize</span> <span class=\"token hvariable\">t</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.3\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 3: get the largest value in a tree of positive Ints. The</span>\n<span class=\"token comment\">-- largest value of an empty tree should be 0.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   treeMax Empty  ==>  0</span>\n<span class=\"token comment\">--   treeMax (Node 3 (Node 5 Empty Empty) (Node 4 Empty Empty))  ==>  5</span>\n\n<span class=\"token hvariable\">treeMax</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Tree</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">treeMax</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.4\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 4: implement a function that checks if all tree values satisfy a</span>\n<span class=\"token comment\">-- condition.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   allValues (>0) Empty  ==>  True</span>\n<span class=\"token comment\">--   allValues (>0) (Node 1 Empty (Node 2 Empty Empty))  ==>  True</span>\n<span class=\"token comment\">--   allValues (>0) (Node 1 Empty (Node 0 Empty Empty))  ==>  False</span>\n\n<span class=\"token hvariable\">allValues</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">allValues</span> <span class=\"token hvariable\">condition</span> <span class=\"token hvariable\">tree</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.5\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 5: implement map for trees.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- mapTree (+1) Empty  ==>  Empty</span>\n<span class=\"token comment\">-- mapTree (+2) (Node 0 (Node 1 Empty Empty) (Node 2 Empty Empty))</span>\n<span class=\"token comment\">--   ==> (Node 2 (Node 3 Empty Empty) (Node 4 Empty Empty))</span>\n\n<span class=\"token hvariable\">mapTree</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">mapTree</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">t</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.6\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 6: given a value and a tree, build a new tree that is the same,</span>\n<span class=\"token comment\">-- except all nodes that contain the value have been removed. Also</span>\n<span class=\"token comment\">-- remove the subnodes of the removed nodes.</span>\n<span class=\"token comment\">-- Check file for more in depth examples</span>\n\n<span class=\"token hvariable\">cull</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Eq</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">cull</span> <span class=\"token hvariable\">val</span> <span class=\"token hvariable\">tree</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.7\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 7: check if a tree is ordered. A tree is ordered if:</span>\n<span class=\"token comment\">--  * all values to the left of the root are smaller than the root value</span>\n<span class=\"token comment\">--  * all of the values to the right of the root are larger than the root value</span>\n<span class=\"token comment\">--  * and the left and right subtrees are ordered.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Hint: allValues will help you here!</span>\n<span class=\"token comment\">-- Check file for more in depth examples</span>\n\n<span class=\"token hvariable\">isOrdered</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Ord</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">isOrdered</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.8\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 8: a path in a tree can be represented as a list of steps that</span>\n<span class=\"token comment\">-- go either left or right.</span>\n\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Step</span> <span class=\"token operator\">=</span> <span class=\"token constant\">StepL</span> <span class=\"token operator\">|</span> <span class=\"token constant\">StepR</span>\n  <span class=\"token keyword\">deriving</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Show</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Eq</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">-- Define a function walk that takes a tree and a list of steps, and</span>\n<span class=\"token comment\">-- returns the value at that point. Return Nothing if you fall of the</span>\n<span class=\"token comment\">-- tree (i.e. hit a Empty).</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   walk [] (Node 1 (Node 2 Empty Empty) Empty)       ==>  Just 1</span>\n<span class=\"token comment\">--   walk [StepL] (Node 1 (Node 2 Empty Empty) Empty)  ==>  Just 2</span>\n<span class=\"token comment\">--   walk [StepL,StepL] (Node 1 (Node 2 Empty Empty) Empty)  ==>  Nothing</span>\n\n<span class=\"token hvariable\">walk</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Step</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">walk</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.9\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 9: given a tree, a path and a value, set the value at the end of</span>\n<span class=\"token comment\">-- the path to the given value. Since Haskell datastructures are</span>\n<span class=\"token comment\">-- immutable, you'll need to build a new tree.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- If the path falls off the tree, do nothing.</span>\n<span class=\"token comment\">-- Check file for more in depth examples</span>\n\n<span class=\"token hvariable\">set</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Step</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">set</span> <span class=\"token hvariable\">path</span> <span class=\"token hvariable\">val</span> <span class=\"token hvariable\">tree</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 5b.10`\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 10: given a value and a tree, return a path that goes from the</span>\n<span class=\"token comment\">-- root to the value. If the value doesn't exist in the tree, return Nothing.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- You may assume the value occurs in the tree at most once.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   search 1 (Node 2 (Node 1 Empty Empty) (Node 3 Empty Empty))  ==>  Just [StepL]</span>\n<span class=\"token comment\">--   search 1 (Node 2 (Node 4 Empty Empty) (Node 3 Empty Empty))  ==>  Nothing</span>\n<span class=\"token comment\">--   search 1 (Node 2 (Node 3 (Node 4 Empty Empty)</span>\n<span class=\"token comment\">--                            (Node 1 Empty Empty))</span>\n<span class=\"token comment\">--                    (Node 5 Empty Empty))                     ==>  Just [StepL,StepR]</span>\n\n<span class=\"token hvariable\">search</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Eq</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Tree</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Step</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">search</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box></div>","frontmatter":{"path":"/part-19/3-recursive-types","title":"Recursive Types"},"fileAbsolutePath":"/home/runner/work/COPL-oop-25/COPL-oop-25/data/part-19/3.md"},"allPages":{"edges":[{"node":{"id":"70db426a-57dc-59f3-be21-475d2cf02f95","frontmatter":{"path":"/all-exercises","title":"All exercises"}}},{"node":{"id":"0ff36324-cef6-5dd9-8bc9-7d1a4cdfa653","frontmatter":{"path":"/error_messages","title":"Common Python error messages"}}},{"node":{"id":"a364b6da-5181-5f8d-b6ca-88f0a492b162","frontmatter":{"path":"/exam","title":"Exam 4.6."}}},{"node":{"id":"76ca1364-2558-5dd3-9076-b9f2daff80e1","frontmatter":{"path":"/exam-adv","title":"Advanced Course in Programming exam 24.02."}}},{"node":{"id":"9d286f0c-3dc4-576e-b256-647729faba53","frontmatter":{"path":"/exam-intro","title":"Introduction to Programming exam 13.01."}}},{"node":{"id":"b59f028e-d6b0-5e1c-96bd-45f04036805e","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"f315e566-70ae-5ed8-b4a7-21375dfed100","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"f03b8a6c-e45d-5374-a650-098e7ef62219","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"10057648-387a-54a2-afe0-d7e150eabf3b","frontmatter":{"path":"/error_haskell_messages","title":"Common Haskell error messages"}}},{"node":{"id":"212221a5-8a78-5136-ba59-a96d46b762d0","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"2cdc5b02-5657-5cb6-bc4d-f5f14fb5ea81","frontmatter":{"path":"/support-and-assistance","title":"Support and assistance"}}},{"node":{"id":"791bc9c7-c446-523e-949b-20e9ff37f966","frontmatter":{"path":"/glossary","title":"Glossary"}}},{"node":{"id":"8695865d-affb-57ed-9994-7bde990ed173","frontmatter":{"path":"/part-10/2-access-modifiers","title":"Access modifiers"}}},{"node":{"id":"b0423f17-6d06-50a6-b986-e8ee96be5929","frontmatter":{"path":"/part-10/4-application-development","title":"Developing a larger application"}}},{"node":{"id":"a21d013a-378d-59b0-a1f6-0f9ef7c26205","frontmatter":{"path":"/part-11/1-list-comprehensions","title":"List comprehensions"}}},{"node":{"id":"738298bc-1412-55ff-b427-0836a4f25860","frontmatter":{"path":"/part-10/3-oo-programming-techniques","title":"Object oriented programming techniques"}}},{"node":{"id":"3982b053-9e05-569a-992e-796f6b50cadf","frontmatter":{"path":"/part-10/1-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"022a71da-dc0b-55cb-aeb2-ae1c881fddf0","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"3a67469a-a235-5dfb-9f74-be9c104a1c17","frontmatter":{"path":"/part-11/2-more-comprehensions","title":"More comprehensions"}}},{"node":{"id":"2cb47b32-2e90-59ad-b688-78f714ba84d2","frontmatter":{"path":"/part-11/3-recursion","title":"Recursion"}}},{"node":{"id":"860b9e5e-9675-59a0-9bc8-2596f6cbe6f8","frontmatter":{"path":"/part-11/4-more-recursion-examples","title":"More recursion examples"}}},{"node":{"id":"edc5eb53-ca3e-584a-96e6-354dee642d66","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"cc2ae34a-275b-5de5-a9ab-8381641e85a4","frontmatter":{"path":"/part-12/1-functions-as-arguments","title":"Functions as arguments"}}},{"node":{"id":"449c1384-ffb9-5f49-86f9-2eea78b203d4","frontmatter":{"path":"/part-12/3-functional-programming","title":"Functional programming"}}},{"node":{"id":"73ccfff1-6985-57bc-b08f-2cedce055fb9","frontmatter":{"path":"/part-12/4-regular-expressions","title":"Regular expressions"}}},{"node":{"id":"33c7a0c6-129e-5252-a6f9-a8fcee13c484","frontmatter":{"path":"/part-12/2-generators","title":"Generators"}}},{"node":{"id":"e232b871-c727-5d49-b360-852b3e5987e9","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"6912be65-e19f-5a8e-b5c5-701bfd90e28c","frontmatter":{"path":"/part-13/1-pygame","title":"Pygame"}}},{"node":{"id":"97f38cd2-063c-5350-81f0-8d675e6ac151","frontmatter":{"path":"/part-13/3-events","title":"Events"}}},{"node":{"id":"e4994455-e1d5-5dbe-8ca1-0a1dce98c5d7","frontmatter":{"path":"/part-13/4-more-pygame-techniques","title":"More pygame techniques"}}},{"node":{"id":"4cfc6877-59d4-56b5-9b3d-d673d8b01f01","frontmatter":{"path":"/part-13/2-animation","title":"Animation"}}},{"node":{"id":"7cb083a3-43ea-584c-ae50-cd411df43d30","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"2feac3ab-fbb2-55aa-a50b-4a16ea4864b7","frontmatter":{"path":"/part-14/1-game-project","title":"Game project"}}},{"node":{"id":"a653435c-496f-52e9-be6b-9003b5fa477f","frontmatter":{"path":"/part-14/2-robot-and-boxes","title":"Robot and boxes"}}},{"node":{"id":"5012c39f-db76-5cd1-9047-dfde06d29aa9","frontmatter":{"path":"/part-14/3-finishing-the-game","title":"Finishing the game"}}},{"node":{"id":"1376d519-cc29-5db1-b33d-fe70f4ce8483","frontmatter":{"path":"/part-14/4-your-own-game","title":"Your own game"}}},{"node":{"id":"4534bd15-62bb-5e29-9277-c4093b3d47ad","frontmatter":{"path":"/part-15/2-haskell","title":"So what is Haskell?"}}},{"node":{"id":"ab918593-3fda-589d-acc2-258f3c133352","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"9fbe1e6c-b40c-59a3-925e-e2b4172f20b6","frontmatter":{"path":"/part-15/3-letsstart","title":"Letâ€™s Start"}}},{"node":{"id":"f2efd7ef-56f7-5ecc-85d6-9aa3d6721ae0","frontmatter":{"path":"/part-15/5-structure-of-haskell","title":"The Structure of a Haskell Program"}}},{"node":{"id":"36c7eeab-221c-5e64-9be8-4c83589784c1","frontmatter":{"path":"/part-15/1-objects-and-methods","title":"Intro Haskell"}}},{"node":{"id":"6aaec35c-ac81-5222-bedf-23f7675bb971","frontmatter":{"path":"/part-15/4-expressions-and-types","title":"Expressions and Types"}}},{"node":{"id":"9383f945-4456-51c5-aec9-34e99e0612fd","frontmatter":{"path":"/part-15/6-working-with-examples","title":"Working with examples"}}},{"node":{"id":"cbbb276e-5024-5cc0-bcb1-8efdcf27dcdd","frontmatter":{"path":"/part-15/7-getting-things-done","title":"How Do I Get Anything Done?"}}},{"node":{"id":"ed319291-57f9-5f87-abf2-366c4b8624dd","frontmatter":{"path":"/part-15/9-wrapping-up","title":"Wrapping up: Indentation, Quiz, Cheatsheet"}}},{"node":{"id":"9658bac3-2c3a-5210-878b-800934662fed","frontmatter":{"path":"/part-15/8s-all-together","title":"All Together Now!"}}},{"node":{"id":"8e95242d-046a-5fc5-a279-8b994675111b","frontmatter":{"path":"/part-15","title":"Part 15"}}},{"node":{"id":"c7409da1-6711-50c3-b1a8-618c60271ae3","frontmatter":{"path":"/part-16/1-recursion-helper-functions","title":"Recursion Helper Functions and Guards"}}},{"node":{"id":"971ef0bf-246c-5e0a-8b11-158995ea1348","frontmatter":{"path":"/part-16/2-lists","title":"Lists"}}},{"node":{"id":"806fa8b9-de69-5b17-ad78-2304f33b751e","frontmatter":{"path":"/part-16/3-immutability-inference-polymorphism","title":"Some notes on Immutability, Type Inference and Polymorphism"}}},{"node":{"id":"231fde5b-3a9f-5a78-838a-9ff3da62f2bb","frontmatter":{"path":"/part-16/4-the-maybe-type","title":"The Maybe type"}}},{"node":{"id":"55c41937-9e28-50c1-808e-fcc3fa43a221","frontmatter":{"path":"/part-16/6-the-case-of-expression","title":"The case-of Expression"}}},{"node":{"id":"67d9a2e7-2255-5de4-8ff8-4f89cf3c3e4b","frontmatter":{"path":"/part-16","title":"Part 16"}}},{"node":{"id":"888943e8-39c6-58d4-b223-c98b8d5f4bed","frontmatter":{"path":"/part-16/7-recap","title":"Recap, Quiz and Cheatsheet"}}},{"node":{"id":"1af85660-9bc5-533a-abd4-4fafc217fa2a","frontmatter":{"path":"/part-17/1-functional-programming","title":"Functional Programming, at Last"}}},{"node":{"id":"ee12b151-bbfd-5303-97ce-fae854429639","frontmatter":{"path":"/part-16/5-the-either-type","title":"The Either type"}}},{"node":{"id":"1b38f7cc-7add-5cd7-b536-63294bd8082e","frontmatter":{"path":"/part-17/2-partial-prefix-infix","title":"Partial Application, Prefix and Infix"}}},{"node":{"id":"1c737b87-526a-5911-b33d-f5eed3685c79","frontmatter":{"path":"/part-17/3-lambdas","title":"Lambdas"}}},{"node":{"id":"2f4d4f8b-88e2-5f6f-a3d1-0953546035f9","frontmatter":{"path":"/part-17/4-more-operators","title":"The . and $ operators, List wranging (takewhile, etc)"}}},{"node":{"id":"25a975c9-ac1b-50ad-a932-d0471c204a44","frontmatter":{"path":"/part-17/5-lists-and-recursion","title":"Lists and Recursion"}}},{"node":{"id":"989f79cf-e3a5-5458-bce5-8b0c8ed61354","frontmatter":{"path":"/part-17/7-quiz","title":"Quiz, Cheatsheet and more exercises"}}},{"node":{"id":"3a41f183-354f-5d08-b4d0-1850b2c6e0aa","frontmatter":{"path":"/part-18/1-tuples","title":"Tuples"}}},{"node":{"id":"8c277ecb-948b-52cf-a12f-f118976b45a7","frontmatter":{"path":"/part-17","title":"Part 17"}}},{"node":{"id":"f923abd0-c92f-533e-a372-be06ed8af825","frontmatter":{"path":"/part-18/2-folding","title":"Folding"}}},{"node":{"id":"90746aeb-e10c-5267-804b-7dbdc30fbcf1","frontmatter":{"path":"/part-18/3-type-classes","title":"Type Classes and Constraints"}}},{"node":{"id":"dcd79ec6-5424-53ab-92e0-80423138ec4e","frontmatter":{"path":"/part-18/4-type-classes","title":"Standard Type Classes"}}},{"node":{"id":"7533b38a-02f6-50e5-b930-6c4b94e5d864","frontmatter":{"path":"/part-18/5-data-maps","title":"Data Maps"}}},{"node":{"id":"bced3c35-04a7-56ba-939c-6ecc6b4c5336","frontmatter":{"path":"/part-18/6-data-arrays","title":"Data Arrays"}}},{"node":{"id":"b22d2862-78d9-56d8-83e4-7d3be7c20c51","frontmatter":{"path":"/part-18/7-reading-docs","title":"Reading Docs"}}},{"node":{"id":"b11f698a-e49a-5911-b037-9910b5ccd078","frontmatter":{"path":"/part-18/8-quiz","title":"Quiz"}}},{"node":{"id":"0aa2bf0c-e8e8-5038-bb01-c9defbed65ad","frontmatter":{"path":"/part-18","title":"Part 18"}}},{"node":{"id":"8209d3f3-3607-5fa9-a270-065f72867c2f","frontmatter":{"path":"/part-19/1-algebraic-datatypes","title":"Algebraic Datatypes"}}},{"node":{"id":"f058d32f-70fb-5e45-b33f-92c8b9925203","frontmatter":{"path":"/part-19/3-recursive-types","title":"Recursive Types"}}},{"node":{"id":"07d9a1cd-d5e7-502f-badc-3ec47695e4f5","frontmatter":{"path":"/part-19/2-type-parameters","title":"Type Parameters"}}},{"node":{"id":"37b614c2-ba14-5c92-8d1f-f4f579f59a4a","frontmatter":{"path":"/part-19/4-record-syntax","title":"Record Syntax"}}},{"node":{"id":"773e8396-9ae3-5c75-9881-9d4a626a4528","frontmatter":{"path":"/part-19/5-summary","title":"Summary of Algebraic Datatypes"}}},{"node":{"id":"e90289c1-8e47-5749-9f41-2315b193ca54","frontmatter":{"path":"/part-19/6-how","title":"How do Algebraic Datatypes Work?"}}},{"node":{"id":"67375c22-2685-5e2a-9ec9-8a04958a8239","frontmatter":{"path":"/part-19/7-quiz","title":"Quiz"}}},{"node":{"id":"fc96aa55-9df9-5b92-b68f-f306732b5dbe","frontmatter":{"path":"/part-19","title":"Part 19"}}},{"node":{"id":"04351fcb-c53a-57d3-8fd3-3145854114a3","frontmatter":{"path":"/part-8/1-objects-and-methods","title":"Objects and methods"}}},{"node":{"id":"efe1c1c6-69db-5355-bd7d-35b01bc6de13","frontmatter":{"path":"/part-8/2-classes-and-objects","title":"Classes and objects"}}},{"node":{"id":"b7d1721d-9c3f-55bc-8e1f-336ba9a3781a","frontmatter":{"path":"/part-8/3-defining-classes","title":"Defining classes"}}},{"node":{"id":"11dec441-ecf7-5a8e-a0eb-8b9cae46b80a","frontmatter":{"path":"/part-8/4-defining-methods","title":"Defining methods"}}},{"node":{"id":"50518a59-9120-5a26-b46b-84903dc1f8c7","frontmatter":{"path":"/part-8/5-more-examples-of-classes","title":"More examples of classes"}}},{"node":{"id":"182487cc-f79f-5454-bccb-fdb7051209ef","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"d1d16ea0-e607-5d88-9485-acbf463bb81c","frontmatter":{"path":"/part-9/1-objects-and-references","title":"Objects and references"}}},{"node":{"id":"07168394-9f19-5d64-addc-c1af579a656d","frontmatter":{"path":"/part-9/2-objects-as-attributes","title":"Objects as attributes"}}},{"node":{"id":"9fe368ff-008c-533f-9c5a-ca8af65d3c7d","frontmatter":{"path":"/part-9/3-encapsulation","title":"Encapsulation"}}},{"node":{"id":"8b3547b9-42f6-52fb-95f0-af81fdd2b422","frontmatter":{"path":"/part-9/4-scope-of-methods","title":"Scope of methods"}}},{"node":{"id":"d839c260-d9fe-59f2-bbae-ab5b84733e8d","frontmatter":{"path":"/part-9/5-class-attributes","title":"Class attributes"}}},{"node":{"id":"2f8cfcd1-55ca-54fb-9c46-f137fb6e918f","frontmatter":{"path":"/part-9/6-more-examples-with-classes","title":"More examples with classes"}}},{"node":{"id":"c60da7d6-42f6-5838-b760-1a897b2b2cc1","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"3dbd990a-41f7-56cb-94f8-b4e75b2965ef","frontmatter":{"path":"/setup/1-vscode","title":"The Visual Studio Code editor, Python interpreter and built-in debugging tool"}}},{"node":{"id":"298bb9e9-8780-597a-bb4e-f523b9f8c952","frontmatter":{"path":"/setup","title":"Setup (VS code)"}}},{"node":{"id":"ef89dc84-be20-5512-8418-095b872581cf","frontmatter":{"path":"/part-17/6-something-fun","title":"List Comprehensions, Custom Operators, Typed Holes"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["1357757885","994120085"]}