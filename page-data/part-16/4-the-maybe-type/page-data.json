{
    "componentChunkName": "component---src-templates-course-content-template-js",
    "path": "/part-16/4-the-maybe-type",
    "result": {"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"text-box","properties":{"variant":"learningObjectives","name":"Learning objectives"},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After this section"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how use can use the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" type"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You know how to pattern match on "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In addition to the list type, Haskell has other parameterized types too. Let’s look at a very common and useful one: the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" type."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes an operation doesn’t have a valid return value (E.g. division by zero.). We have a couple of options in this situation. We can use an error value, like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"-1"}]},{"type":"text","value":". This is a bit ugly, not always possible. We can throw an exception. This is impure. In some other languages we would return a special null value that exists in (almost) all types. However Haskell does not have a null."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The solution Haskell offers us instead is to change our return type to a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" type. This is pure, safe and neat. The type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe a"}]},{"type":"text","value":" has two "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"constructors"}]},{"type":"text","value":": "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":". "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" is just a constant, but "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" takes a parameter. More concretely:"}]},{"type":"text","value":"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"element","tagName":"thead","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"Type"}]},{"type":"element","tagName":"th","properties":{},"children":[{"type":"text","value":"Values"}]}]}]},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe Bool"}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just False"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just True"}]}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe Int"}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just 0"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just 1"}]},{"type":"text","value":", …"}]}]},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe [Int]"}]}]},{"type":"element","tagName":"td","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just []"}]},{"type":"text","value":", "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just [1,1337]"}]},{"type":"text","value":", …"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can think of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe a"}]},{"type":"text","value":" as being a bit like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"[a]"}]},{"type":"text","value":" except there can only be 0 or 1 elements, not more. Alternatively, you can think of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe a"}]},{"type":"text","value":" introducing a null value to the type "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":". If you’re familiar with Java, "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe Integer"}]},{"type":"text","value":" is the Haskell equivalent of Java’s "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Optional<Integer>"}]},{"type":"text","value":"."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can create "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" values by either specifying "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" or "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just someOtherValue"}]},{"type":"text","value":":"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a camel\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a camel\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a camel\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"a camel\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Char"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"   "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- the same as Maybe String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- given a password, return (Just username) if login succeeds, Nothing otherwise"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"f4bulous!\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"unicorn73\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"swordfish\""}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","string"]},"children":[{"type":"text","value":"\"megahacker\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"login"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"_"}]},{"type":"text","value":"           "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You use a "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" value by pattern matching on it. Usually you define patterns for the "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just something"}]},{"type":"text","value":" cases. Some examples:"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Multiply an Int with a Maybe Int. Nothing is treated as no multiplication at all."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"perhapsMultiply"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"perhapsMultiply"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"perhapsMultiply"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"j"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"*"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"j"}]},{"type":"text","value":"   "},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Note how j denotes the value inside the Just"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"perhapsMultiply"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"perhapsMultiply"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"3"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"2"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"6"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeHead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeHead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"if"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"null"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"then"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","keyword"]},"children":[{"type":"text","value":"else"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"head"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeHead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":"  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeHead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":"  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":"  "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"0"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"headOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeHead"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"intOrZero"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"("}]},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":")"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"==>"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","number"]},"children":[{"type":"text","value":"1"}]}]}]}]},{"type":"element","tagName":"h2","properties":{"id":"sidenote-constructors","style":"position:relative;"},"children":[{"type":"text","value":"Sidenote: Constructors"},{"type":"element","tagName":"a","properties":{"href":"#sidenote-constructors","ariaLabel":"sidenote constructors permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see above, we can pattern match on the constructors of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":": "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":". We’ll get back to what constructors mean later. For now it’s enough to note that constructors are special values that start with a capital letter that you can pattern match on."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Other constructors that we’ve already seen include the constructors of "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Bool"}]},{"type":"text","value":" – "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"True"}]},{"type":"text","value":" and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":". We’ll introduce the constructors of the list type on the next lecture."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Constructors can be used just like Haskell values. Constructors that take no arguments like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Nothing"}]},{"type":"text","value":", and "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"False"}]},{"type":"text","value":" are just constants. Constructors like "},{"type":"element","tagName":"code","properties":{"className":["language-text"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" that take an argument behave like functions. They even have function types!"}]},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Prelude"}]},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":">"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":":"}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Just"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]}]}]}]},{"type":"element","tagName":"h2","properties":{"id":"exercises","style":"position:relative;"},"children":[{"type":"text","value":"Exercises:"},{"type":"element","tagName":"a","properties":{"href":"#exercises","ariaLabel":"exercises permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All exercises can be found in "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set2a.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set2a"}]},{"type":"text","value":"\nand "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set2b.hs","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Set2b"}]},{"type":"text","value":". Please pay attention in the title of the exercise in which file the exercises of this section can be found."}]},{"type":"element","tagName":"h3","properties":{"id":"exercises-from-2a","style":"position:relative;"},"children":[{"type":"text","value":"Exercises from 2a:"},{"type":"element","tagName":"a","properties":{"href":"#exercises-from-2a","ariaLabel":"exercises from 2a permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 2a.7"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 7: implement safe integer division, that is, a function that"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- returns a Just result normally, but Nothing if the divisor is zero."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Remember that integer division can be done with the div function."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeDiv 4 2  ==> Just 2"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeDiv 4 0  ==> Nothing"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeDiv"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Integer"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeDiv"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"x"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"y"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 2a.8"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 8: implement a function greet that greets a person given a first"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- name and possibly a last name. The last name is represented as a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Maybe String value."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   greet \"John\" Nothing         ==> \"Hello, John!\""}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   greet \"John\" (Just \"Smith\")  ==> \"Hello, John Smith!\""}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"String"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"greet"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"first"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","builtin"]},"children":[{"type":"text","value":"last"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]},{"type":"text","value":"\n"}]}]}]}]},{"type":"element","tagName":"text-box","properties":{"variant":"exercise","name":"Exercise 2a.9"},"children":[{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"haskell"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-haskell"]},"children":[{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Ex 9: safe list indexing. Define a function safeIndex so that"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex xs i"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- gets the element at index i in the list xs. If i is not a valid"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- index, Nothing is returned."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"-- Examples:"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex [True] 1            ==> Nothing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex [10,20,30] 0        ==> Just 10"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex [10,20,30] 2        ==> Just 30"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex [10,20,30] 3        ==> Nothing"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","comment"]},"children":[{"type":"text","value":"--   safeIndex [\"a\",\"b\",\"c\"] (-1)  ==> Nothing"}]},{"type":"text","value":"\n\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeIndex"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"::"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"["}]},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"element","tagName":"span","properties":{"className":["token","punctuation"]},"children":[{"type":"text","value":"]"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Int"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"->"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","constant"]},"children":[{"type":"text","value":"Maybe"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"a"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"safeIndex"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"xs"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"i"}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","operator"]},"children":[{"type":"text","value":"="}]},{"type":"text","value":" "},{"type":"element","tagName":"span","properties":{"className":["token","hvariable"]},"children":[{"type":"text","value":"todo"}]}]}]}]}]}]},"html":"<div><text-box variant='learningObjectives' name=\"Learning objectives\"><p>After this section</p><ul>\n<li>You know how use can use the <code class=\"language-text\">Maybe</code> type</li>\n<li>You know how to pattern match on <code class=\"language-text\">Just</code> and <code class=\"language-text\">Nothing</code></li>\n</ul></text-box><p>In addition to the list type, Haskell has other parameterized types too. Let’s look at a very common and useful one: the <code class=\"language-text\">Maybe</code> type.</p><p>Sometimes an operation doesn’t have a valid return value (E.g. division by zero.). We have a couple of options in this situation. We can use an error value, like <code class=\"language-text\">-1</code>. This is a bit ugly, not always possible. We can throw an exception. This is impure. In some other languages we would return a special null value that exists in (almost) all types. However Haskell does not have a null.</p><p>The solution Haskell offers us instead is to change our return type to a <code class=\"language-text\">Maybe</code> type. This is pure, safe and neat. The type <code class=\"language-text\">Maybe a</code> has two <em>constructors</em>: <code class=\"language-text\">Nothing</code> and <code class=\"language-text\">Just</code>. <code class=\"language-text\">Nothing</code> is just a constant, but <code class=\"language-text\">Just</code> takes a parameter. More concretely:</p><table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">Maybe Bool</code></td>\n<td><code class=\"language-text\">Nothing</code>, <code class=\"language-text\">Just False</code>, <code class=\"language-text\">Just True</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Maybe Int</code></td>\n<td><code class=\"language-text\">Nothing</code>, <code class=\"language-text\">Just 0</code>, <code class=\"language-text\">Just 1</code>, …</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">Maybe [Int]</code></td>\n<td><code class=\"language-text\">Nothing</code>, <code class=\"language-text\">Just []</code>, <code class=\"language-text\">Just [1,1337]</code>, …</td>\n</tr>\n</tbody>\n</table><p>You can think of <code class=\"language-text\">Maybe a</code> as being a bit like <code class=\"language-text\">[a]</code> except there can only be 0 or 1 elements, not more. Alternatively, you can think of <code class=\"language-text\">Maybe a</code> introducing a null value to the type <code class=\"language-text\">a</code>. If you’re familiar with Java, <code class=\"language-text\">Maybe Integer</code> is the Haskell equivalent of Java’s <code class=\"language-text\">Optional&lt;Integer></code>.</p><p>You can create <code class=\"language-text\">Maybe</code> values by either specifying <code class=\"language-text\">Nothing</code> or <code class=\"language-text\">Just someOtherValue</code>:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Nothing</span>\n<span class=\"token constant\">Nothing</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token constant\">Just</span> <span class=\"token string\">\"a camel\"</span>\n<span class=\"token constant\">Just</span> <span class=\"token string\">\"a camel\"</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Just</span> <span class=\"token string\">\"a camel\"</span>\n<span class=\"token constant\">Just</span> <span class=\"token string\">\"a camel\"</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Char</span><span class=\"token punctuation\">]</span>   <span class=\"token comment\">-- the same as Maybe String</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token constant\">Just</span> <span class=\"token constant\">True</span>\n<span class=\"token constant\">Just</span> <span class=\"token constant\">True</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Just</span> <span class=\"token constant\">True</span>\n<span class=\"token constant\">Just</span> <span class=\"token constant\">True</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Bool</span>\n\n<span class=\"token comment\">-- given a password, return (Just username) if login succeeds, Nothing otherwise</span>\n<span class=\"token hvariable\">login</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">login</span> <span class=\"token string\">\"f4bulous!\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token string\">\"unicorn73\"</span>\n<span class=\"token hvariable\">login</span> <span class=\"token string\">\"swordfish\"</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token string\">\"megahacker\"</span>\n<span class=\"token hvariable\">login</span> <span class=\"token hvariable\">_</span>           <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span></code></pre></div><p>You use a <code class=\"language-text\">Maybe</code> value by pattern matching on it. Usually you define patterns for the <code class=\"language-text\">Nothing</code> and <code class=\"language-text\">Just something</code> cases. Some examples:</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Multiply an Int with a Maybe Int. Nothing is treated as no multiplication at all.</span>\n<span class=\"token hvariable\">perhapsMultiply</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">perhapsMultiply</span> <span class=\"token hvariable\">i</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">i</span>\n<span class=\"token hvariable\">perhapsMultiply</span> <span class=\"token hvariable\">i</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">j</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">i</span><span class=\"token operator\">*</span><span class=\"token hvariable\">j</span>   <span class=\"token comment\">-- Note how j denotes the value inside the Just</span>\n\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">perhapsMultiply</span> <span class=\"token number\">3</span> <span class=\"token constant\">Nothing</span>\n<span class=\"token number\">3</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token hvariable\">perhapsMultiply</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">6</span>\n\n<span class=\"token hvariable\">intOrZero</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">intOrZero</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">intOrZero</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">i</span>\n\n<span class=\"token hvariable\">safeHead</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">safeHead</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">if</span> <span class=\"token builtin\">null</span> <span class=\"token hvariable\">xs</span> <span class=\"token keyword\">then</span> <span class=\"token constant\">Nothing</span> <span class=\"token keyword\">else</span> <span class=\"token constant\">Just</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">head</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">headOrZero</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token hvariable\">headOrZero</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">intOrZero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">safeHead</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token hvariable\">headOrZero</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">==></span> <span class=\"token hvariable\">intOrZero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">safeHead</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">==></span> <span class=\"token hvariable\">intOrZero</span> <span class=\"token constant\">Nothing</span>  <span class=\"token operator\">==></span> <span class=\"token number\">0</span>\n<span class=\"token hvariable\">headOrZero</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==></span> <span class=\"token hvariable\">intOrZero</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">safeHead</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==></span> <span class=\"token hvariable\">intOrZero</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==></span> <span class=\"token number\">1</span></code></pre></div><h2 id=\"sidenote-constructors\" style=\"position:relative;\">Sidenote: Constructors<a href=\"#sidenote-constructors\" aria-label=\"sidenote constructors permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>As you can see above, we can pattern match on the constructors of <code class=\"language-text\">Maybe</code>: <code class=\"language-text\">Just</code> and <code class=\"language-text\">Nothing</code>. We’ll get back to what constructors mean later. For now it’s enough to note that constructors are special values that start with a capital letter that you can pattern match on.</p><p>Other constructors that we’ve already seen include the constructors of <code class=\"language-text\">Bool</code> – <code class=\"language-text\">True</code> and <code class=\"language-text\">False</code>. We’ll introduce the constructors of the list type on the next lecture.</p><p>Constructors can be used just like Haskell values. Constructors that take no arguments like <code class=\"language-text\">Nothing</code>, and <code class=\"language-text\">False</code> are just constants. Constructors like <code class=\"language-text\">Just</code> that take an argument behave like functions. They even have function types!</p><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span><span class=\"token hvariable\">t</span> <span class=\"token constant\">Just</span>\n<span class=\"token constant\">Just</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span></code></pre></div><h2 id=\"exercises\" style=\"position:relative;\">Exercises:<a href=\"#exercises\" aria-label=\"exercises permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>All exercises can be found in <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set2a.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set2a</a>\nand <a href=\"https://github.com/moocfi/haskell-mooc/blob/master/exercises/Set2b.hs\" target=\"_blank\" rel=\"noopener noreferrer\">Set2b</a>. Please pay attention in the title of the exercise in which file the exercises of this section can be found.</p><h3 id=\"exercises-from-2a\" style=\"position:relative;\">Exercises from 2a:<a href=\"#exercises-from-2a\" aria-label=\"exercises from 2a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><text-box variant='exercise' name=\"Exercise 2a.7\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 7: implement safe integer division, that is, a function that</span>\n<span class=\"token comment\">-- returns a Just result normally, but Nothing if the divisor is zero.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Remember that integer division can be done with the div function.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   safeDiv 4 2  ==> Just 2</span>\n<span class=\"token comment\">--   safeDiv 4 0  ==> Nothing</span>\n\n<span class=\"token hvariable\">safeDiv</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Integer</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Integer</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Integer</span>\n<span class=\"token hvariable\">safeDiv</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 2a.8\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 8: implement a function greet that greets a person given a first</span>\n<span class=\"token comment\">-- name and possibly a last name. The last name is represented as a</span>\n<span class=\"token comment\">-- Maybe String value.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   greet \"John\" Nothing         ==> \"Hello, John!\"</span>\n<span class=\"token comment\">--   greet \"John\" (Just \"Smith\")  ==> \"Hello, John Smith!\"</span>\n\n<span class=\"token hvariable\">greet</span> <span class=\"token operator\">::</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">String</span> <span class=\"token operator\">-></span> <span class=\"token constant\">String</span>\n<span class=\"token hvariable\">greet</span> <span class=\"token hvariable\">first</span> <span class=\"token builtin\">last</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span>\n</code></pre></div></text-box><text-box variant='exercise' name=\"Exercise 2a.9\"><div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- Ex 9: safe list indexing. Define a function safeIndex so that</span>\n<span class=\"token comment\">--   safeIndex xs i</span>\n<span class=\"token comment\">-- gets the element at index i in the list xs. If i is not a valid</span>\n<span class=\"token comment\">-- index, Nothing is returned.</span>\n<span class=\"token comment\">--</span>\n<span class=\"token comment\">-- Examples:</span>\n<span class=\"token comment\">--   safeIndex [True] 1            ==> Nothing</span>\n<span class=\"token comment\">--   safeIndex [10,20,30] 0        ==> Just 10</span>\n<span class=\"token comment\">--   safeIndex [10,20,30] 2        ==> Just 30</span>\n<span class=\"token comment\">--   safeIndex [10,20,30] 3        ==> Nothing</span>\n<span class=\"token comment\">--   safeIndex [\"a\",\"b\",\"c\"] (-1)  ==> Nothing</span>\n\n<span class=\"token hvariable\">safeIndex</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">safeIndex</span> <span class=\"token hvariable\">xs</span> <span class=\"token hvariable\">i</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">todo</span></code></pre></div></text-box></div>","frontmatter":{"path":"/part-16/4-the-maybe-type","title":"The Maybe type"},"fileAbsolutePath":"/home/runner/work/COPL-oop-25/COPL-oop-25/data/part-16/4.md"},"allPages":{"edges":[{"node":{"id":"70db426a-57dc-59f3-be21-475d2cf02f95","frontmatter":{"path":"/all-exercises","title":"All exercises"}}},{"node":{"id":"0ff36324-cef6-5dd9-8bc9-7d1a4cdfa653","frontmatter":{"path":"/error_messages","title":"Common Python error messages"}}},{"node":{"id":"a364b6da-5181-5f8d-b6ca-88f0a492b162","frontmatter":{"path":"/exam","title":"Exam 4.6."}}},{"node":{"id":"76ca1364-2558-5dd3-9076-b9f2daff80e1","frontmatter":{"path":"/exam-adv","title":"Advanced Course in Programming exam 24.02."}}},{"node":{"id":"9d286f0c-3dc4-576e-b256-647729faba53","frontmatter":{"path":"/exam-intro","title":"Introduction to Programming exam 13.01."}}},{"node":{"id":"f315e566-70ae-5ed8-b4a7-21375dfed100","frontmatter":{"path":"/frontmatter-guide","title":"Frontmatter-guide"}}},{"node":{"id":"f03b8a6c-e45d-5374-a650-098e7ef62219","frontmatter":{"path":"/grading-and-exams","title":"Grading and exams"}}},{"node":{"id":"10057648-387a-54a2-afe0-d7e150eabf3b","frontmatter":{"path":"/error_haskell_messages","title":"Common Haskell error messages"}}},{"node":{"id":"212221a5-8a78-5136-ba59-a96d46b762d0","frontmatter":{"path":"/","title":"About this course"}}},{"node":{"id":"b59f028e-d6b0-5e1c-96bd-45f04036805e","frontmatter":{"path":"/faq","title":"Frequently asked questions"}}},{"node":{"id":"2cdc5b02-5657-5cb6-bc4d-f5f14fb5ea81","frontmatter":{"path":"/support-and-assistance","title":"Support and assistance"}}},{"node":{"id":"791bc9c7-c446-523e-949b-20e9ff37f966","frontmatter":{"path":"/glossary","title":"Glossary"}}},{"node":{"id":"3982b053-9e05-569a-992e-796f6b50cadf","frontmatter":{"path":"/part-10/1-class-hierarchies","title":"Class hierarchies"}}},{"node":{"id":"8695865d-affb-57ed-9994-7bde990ed173","frontmatter":{"path":"/part-10/2-access-modifiers","title":"Access modifiers"}}},{"node":{"id":"738298bc-1412-55ff-b427-0836a4f25860","frontmatter":{"path":"/part-10/3-oo-programming-techniques","title":"Object oriented programming techniques"}}},{"node":{"id":"b0423f17-6d06-50a6-b986-e8ee96be5929","frontmatter":{"path":"/part-10/4-application-development","title":"Developing a larger application"}}},{"node":{"id":"022a71da-dc0b-55cb-aeb2-ae1c881fddf0","frontmatter":{"path":"/part-10","title":"Part 10"}}},{"node":{"id":"a21d013a-378d-59b0-a1f6-0f9ef7c26205","frontmatter":{"path":"/part-11/1-list-comprehensions","title":"List comprehensions"}}},{"node":{"id":"3a67469a-a235-5dfb-9f74-be9c104a1c17","frontmatter":{"path":"/part-11/2-more-comprehensions","title":"More comprehensions"}}},{"node":{"id":"860b9e5e-9675-59a0-9bc8-2596f6cbe6f8","frontmatter":{"path":"/part-11/4-more-recursion-examples","title":"More recursion examples"}}},{"node":{"id":"2cb47b32-2e90-59ad-b688-78f714ba84d2","frontmatter":{"path":"/part-11/3-recursion","title":"Recursion"}}},{"node":{"id":"edc5eb53-ca3e-584a-96e6-354dee642d66","frontmatter":{"path":"/part-11","title":"Part 11"}}},{"node":{"id":"cc2ae34a-275b-5de5-a9ab-8381641e85a4","frontmatter":{"path":"/part-12/1-functions-as-arguments","title":"Functions as arguments"}}},{"node":{"id":"33c7a0c6-129e-5252-a6f9-a8fcee13c484","frontmatter":{"path":"/part-12/2-generators","title":"Generators"}}},{"node":{"id":"449c1384-ffb9-5f49-86f9-2eea78b203d4","frontmatter":{"path":"/part-12/3-functional-programming","title":"Functional programming"}}},{"node":{"id":"73ccfff1-6985-57bc-b08f-2cedce055fb9","frontmatter":{"path":"/part-12/4-regular-expressions","title":"Regular expressions"}}},{"node":{"id":"e232b871-c727-5d49-b360-852b3e5987e9","frontmatter":{"path":"/part-12","title":"Part 12"}}},{"node":{"id":"6912be65-e19f-5a8e-b5c5-701bfd90e28c","frontmatter":{"path":"/part-13/1-pygame","title":"Pygame"}}},{"node":{"id":"4cfc6877-59d4-56b5-9b3d-d673d8b01f01","frontmatter":{"path":"/part-13/2-animation","title":"Animation"}}},{"node":{"id":"97f38cd2-063c-5350-81f0-8d675e6ac151","frontmatter":{"path":"/part-13/3-events","title":"Events"}}},{"node":{"id":"e4994455-e1d5-5dbe-8ca1-0a1dce98c5d7","frontmatter":{"path":"/part-13/4-more-pygame-techniques","title":"More pygame techniques"}}},{"node":{"id":"7cb083a3-43ea-584c-ae50-cd411df43d30","frontmatter":{"path":"/part-13","title":"Part 13"}}},{"node":{"id":"a653435c-496f-52e9-be6b-9003b5fa477f","frontmatter":{"path":"/part-14/2-robot-and-boxes","title":"Robot and boxes"}}},{"node":{"id":"5012c39f-db76-5cd1-9047-dfde06d29aa9","frontmatter":{"path":"/part-14/3-finishing-the-game","title":"Finishing the game"}}},{"node":{"id":"1376d519-cc29-5db1-b33d-fe70f4ce8483","frontmatter":{"path":"/part-14/4-your-own-game","title":"Your own game"}}},{"node":{"id":"ab918593-3fda-589d-acc2-258f3c133352","frontmatter":{"path":"/part-14","title":"Part 14"}}},{"node":{"id":"2feac3ab-fbb2-55aa-a50b-4a16ea4864b7","frontmatter":{"path":"/part-14/1-game-project","title":"Game project"}}},{"node":{"id":"4534bd15-62bb-5e29-9277-c4093b3d47ad","frontmatter":{"path":"/part-15/2-haskell","title":"So what is Haskell?"}}},{"node":{"id":"36c7eeab-221c-5e64-9be8-4c83589784c1","frontmatter":{"path":"/part-15/1-objects-and-methods","title":"Intro Haskell"}}},{"node":{"id":"6aaec35c-ac81-5222-bedf-23f7675bb971","frontmatter":{"path":"/part-15/4-expressions-and-types","title":"Expressions and Types"}}},{"node":{"id":"9fbe1e6c-b40c-59a3-925e-e2b4172f20b6","frontmatter":{"path":"/part-15/3-letsstart","title":"Let’s Start"}}},{"node":{"id":"f2efd7ef-56f7-5ecc-85d6-9aa3d6721ae0","frontmatter":{"path":"/part-15/5-structure-of-haskell","title":"The Structure of a Haskell Program"}}},{"node":{"id":"9383f945-4456-51c5-aec9-34e99e0612fd","frontmatter":{"path":"/part-15/6-working-with-examples","title":"Working with examples"}}},{"node":{"id":"cbbb276e-5024-5cc0-bcb1-8efdcf27dcdd","frontmatter":{"path":"/part-15/7-getting-things-done","title":"How Do I Get Anything Done?"}}},{"node":{"id":"9658bac3-2c3a-5210-878b-800934662fed","frontmatter":{"path":"/part-15/8s-all-together","title":"All Together Now!"}}},{"node":{"id":"ed319291-57f9-5f87-abf2-366c4b8624dd","frontmatter":{"path":"/part-15/9-wrapping-up","title":"Wrapping up: Indentation, Quiz, Cheatsheet"}}},{"node":{"id":"8e95242d-046a-5fc5-a279-8b994675111b","frontmatter":{"path":"/part-15","title":"Part 15"}}},{"node":{"id":"c7409da1-6711-50c3-b1a8-618c60271ae3","frontmatter":{"path":"/part-16/1-recursion-helper-functions","title":"Recursion Helper Functions and Guards"}}},{"node":{"id":"971ef0bf-246c-5e0a-8b11-158995ea1348","frontmatter":{"path":"/part-16/2-lists","title":"Lists"}}},{"node":{"id":"806fa8b9-de69-5b17-ad78-2304f33b751e","frontmatter":{"path":"/part-16/3-immutability-inference-polymorphism","title":"Some notes on Immutability, Type Inference and Polymorphism"}}},{"node":{"id":"231fde5b-3a9f-5a78-838a-9ff3da62f2bb","frontmatter":{"path":"/part-16/4-the-maybe-type","title":"The Maybe type"}}},{"node":{"id":"ee12b151-bbfd-5303-97ce-fae854429639","frontmatter":{"path":"/part-16/5-the-either-type","title":"The Either type"}}},{"node":{"id":"55c41937-9e28-50c1-808e-fcc3fa43a221","frontmatter":{"path":"/part-16/6-the-case-of-expression","title":"The case-of Expression"}}},{"node":{"id":"888943e8-39c6-58d4-b223-c98b8d5f4bed","frontmatter":{"path":"/part-16/7-recap","title":"Recap, Quiz and Cheatsheet"}}},{"node":{"id":"67d9a2e7-2255-5de4-8ff8-4f89cf3c3e4b","frontmatter":{"path":"/part-16","title":"Part 16"}}},{"node":{"id":"1af85660-9bc5-533a-abd4-4fafc217fa2a","frontmatter":{"path":"/part-17/1-functional-programming","title":"Functional Programming, at Last"}}},{"node":{"id":"1b38f7cc-7add-5cd7-b536-63294bd8082e","frontmatter":{"path":"/part-17/2-partial-prefix-infix","title":"Partial Application, Prefix and Infix"}}},{"node":{"id":"1c737b87-526a-5911-b33d-f5eed3685c79","frontmatter":{"path":"/part-17/3-lambdas","title":"Lambdas"}}},{"node":{"id":"2f4d4f8b-88e2-5f6f-a3d1-0953546035f9","frontmatter":{"path":"/part-17/4-more-operators","title":"The . and $ operators, List wranging (takewhile, etc)"}}},{"node":{"id":"25a975c9-ac1b-50ad-a932-d0471c204a44","frontmatter":{"path":"/part-17/5-lists-and-recursion","title":"Lists and Recursion"}}},{"node":{"id":"ef89dc84-be20-5512-8418-095b872581cf","frontmatter":{"path":"/part-17/6-something-fun","title":"List Comprehensions, Custom Operators, Typed Holes"}}},{"node":{"id":"989f79cf-e3a5-5458-bce5-8b0c8ed61354","frontmatter":{"path":"/part-17/7-quiz","title":"Wrapping up + quiz"}}},{"node":{"id":"8c277ecb-948b-52cf-a12f-f118976b45a7","frontmatter":{"path":"/part-17","title":"Part 17"}}},{"node":{"id":"3a41f183-354f-5d08-b4d0-1850b2c6e0aa","frontmatter":{"path":"/part-18/1-tuples","title":"Tuples"}}},{"node":{"id":"f923abd0-c92f-533e-a372-be06ed8af825","frontmatter":{"path":"/part-18/2-folding","title":"Folding"}}},{"node":{"id":"90746aeb-e10c-5267-804b-7dbdc30fbcf1","frontmatter":{"path":"/part-18/3-type-classes","title":"Type Classes and Constraints"}}},{"node":{"id":"dcd79ec6-5424-53ab-92e0-80423138ec4e","frontmatter":{"path":"/part-18/4-type-classes","title":"Standard Type Classes"}}},{"node":{"id":"7533b38a-02f6-50e5-b930-6c4b94e5d864","frontmatter":{"path":"/part-18/5-data-maps","title":"Data Maps"}}},{"node":{"id":"b22d2862-78d9-56d8-83e4-7d3be7c20c51","frontmatter":{"path":"/part-18/7-reading-docs","title":"Reading Docs"}}},{"node":{"id":"bced3c35-04a7-56ba-939c-6ecc6b4c5336","frontmatter":{"path":"/part-18/6-data-arrays","title":"Data Arrays"}}},{"node":{"id":"b11f698a-e49a-5911-b037-9910b5ccd078","frontmatter":{"path":"/part-18/8-quiz","title":"Quiz"}}},{"node":{"id":"0aa2bf0c-e8e8-5038-bb01-c9defbed65ad","frontmatter":{"path":"/part-18","title":"Part 18"}}},{"node":{"id":"8209d3f3-3607-5fa9-a270-065f72867c2f","frontmatter":{"path":"/part-19/1-algebraic-datatypes","title":"Algebraic Datatypes"}}},{"node":{"id":"07d9a1cd-d5e7-502f-badc-3ec47695e4f5","frontmatter":{"path":"/part-19/2-type-parameters","title":"Type Parameters"}}},{"node":{"id":"f058d32f-70fb-5e45-b33f-92c8b9925203","frontmatter":{"path":"/part-19/3-recursive-types","title":"Recursive Types"}}},{"node":{"id":"37b614c2-ba14-5c92-8d1f-f4f579f59a4a","frontmatter":{"path":"/part-19/4-record-syntax","title":"Record Syntax"}}},{"node":{"id":"773e8396-9ae3-5c75-9881-9d4a626a4528","frontmatter":{"path":"/part-19/5-summary","title":"Summary of Algebraic Datatypes"}}},{"node":{"id":"e90289c1-8e47-5749-9f41-2315b193ca54","frontmatter":{"path":"/part-19/6-how","title":"How do Algebraic Datatypes Work?"}}},{"node":{"id":"67375c22-2685-5e2a-9ec9-8a04958a8239","frontmatter":{"path":"/part-19/7-quiz","title":"Quiz"}}},{"node":{"id":"04351fcb-c53a-57d3-8fd3-3145854114a3","frontmatter":{"path":"/part-8/1-objects-and-methods","title":"Objects and methods"}}},{"node":{"id":"fc96aa55-9df9-5b92-b68f-f306732b5dbe","frontmatter":{"path":"/part-19","title":"Part 19"}}},{"node":{"id":"efe1c1c6-69db-5355-bd7d-35b01bc6de13","frontmatter":{"path":"/part-8/2-classes-and-objects","title":"Classes and objects"}}},{"node":{"id":"b7d1721d-9c3f-55bc-8e1f-336ba9a3781a","frontmatter":{"path":"/part-8/3-defining-classes","title":"Defining classes"}}},{"node":{"id":"50518a59-9120-5a26-b46b-84903dc1f8c7","frontmatter":{"path":"/part-8/5-more-examples-of-classes","title":"More examples of classes"}}},{"node":{"id":"11dec441-ecf7-5a8e-a0eb-8b9cae46b80a","frontmatter":{"path":"/part-8/4-defining-methods","title":"Defining methods"}}},{"node":{"id":"182487cc-f79f-5454-bccb-fdb7051209ef","frontmatter":{"path":"/part-8","title":"Part 8"}}},{"node":{"id":"d1d16ea0-e607-5d88-9485-acbf463bb81c","frontmatter":{"path":"/part-9/1-objects-and-references","title":"Objects and references"}}},{"node":{"id":"07168394-9f19-5d64-addc-c1af579a656d","frontmatter":{"path":"/part-9/2-objects-as-attributes","title":"Objects as attributes"}}},{"node":{"id":"9fe368ff-008c-533f-9c5a-ca8af65d3c7d","frontmatter":{"path":"/part-9/3-encapsulation","title":"Encapsulation"}}},{"node":{"id":"8b3547b9-42f6-52fb-95f0-af81fdd2b422","frontmatter":{"path":"/part-9/4-scope-of-methods","title":"Scope of methods"}}},{"node":{"id":"d839c260-d9fe-59f2-bbae-ab5b84733e8d","frontmatter":{"path":"/part-9/5-class-attributes","title":"Class attributes"}}},{"node":{"id":"2f8cfcd1-55ca-54fb-9c46-f137fb6e918f","frontmatter":{"path":"/part-9/6-more-examples-with-classes","title":"More examples with classes"}}},{"node":{"id":"c60da7d6-42f6-5838-b760-1a897b2b2cc1","frontmatter":{"path":"/part-9","title":"Part 9"}}},{"node":{"id":"3dbd990a-41f7-56cb-94f8-b4e75b2965ef","frontmatter":{"path":"/setup/1-vscode","title":"The Visual Studio Code editor, Python interpreter and built-in debugging tool"}}},{"node":{"id":"298bb9e9-8780-597a-bb4e-f523b9f8c952","frontmatter":{"path":"/setup","title":"Setup (VS code)"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["1357757885","994120085"]}